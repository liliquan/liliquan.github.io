<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Webpack基本介绍</title>
      <link href="/2018/11/29/2018-09-07-vue/"/>
      <url>/2018/11/29/2018-09-07-vue/</url>
      
        <content type="html"><![CDATA[<h1 id="WebpackCourse"><a href="#WebpackCourse" class="headerlink" title="WebpackCourse"></a>WebpackCourse</h1><p>This Repository will study Webpack</p><h2 id="chapter-1-Webpack介绍"><a href="#chapter-1-Webpack介绍" class="headerlink" title="chapter 1: Webpack介绍"></a>chapter 1: Webpack介绍</h2><h3 id="1-1-为什么要用Webpack"><a href="#1-1-为什么要用Webpack" class="headerlink" title="1.1 为什么要用Webpack"></a>1.1 为什么要用Webpack</h3><p>前端本可以直接HTML、CSS、Javascript就上了，不过如果要处理文件依赖、文件合并压缩、资源管理、使用新技术改善生活的时候，就得利用工具来辅助了。</p><p>以往有常见的模块化工具RequireJS，SeaJS等，构建工具Grunt、Gulp等，新的技术Sass、React、ES6、Vue等，要在项目中使用这些东西，不用工具的话就略麻烦了。</p><p><img src="/images/1530253190090.png" alt="1530253190090">|</p><p>其实简单地说要<strong>聚焦两点：模块化以及自动构建。</strong></p><p><strong>模块化可以使用RequireJS来处理依赖，使用Gulp来进行构建；也可以使用ES6新特性来处理模块化依赖，使用webpack来构建</strong></p><p>两种方式都狠不错，但潮流所驱，后者变得愈来愈强大，当然也不是说后者就替代了前者，只是大部分情况下，后者更好</p><h3 id="1-2-什么是Webpack"><a href="#1-2-什么是Webpack" class="headerlink" title="1.2 什么是Webpack"></a>1.2 什么是Webpack</h3><p>如其名，Web+Pack 即web的打包，主要用于web项目中打包资源进行自动构建。</p><p><strong>Webpack将所有资源视为JS的模块来进行构建</strong>，所以对于CSS，Image等非JS类型的文件，Webpack会使用相应的加载(loader)器来加载成其可识别的JS模块资源</p><p>通过配置一些信息，就能将资源进行打包构建，更好地实现前端的工程化</p><p><img src="/images/1530253923237.png" alt="1530253923237"></p><h2 id="chapter-2-安装"><a href="#chapter-2-安装" class="headerlink" title="chapter 2: 安装"></a>chapter 2: 安装</h2><h3 id="2-1-前提条件"><a href="#2-1-前提条件" class="headerlink" title="2.1 前提条件"></a>2.1 前提条件</h3><p>在开始之前,请确保安装了<strong>Node.js的最新版本</strong>.使用Node.js最新的长期支持版本(LTS - Long Term Support),是最理想的起步.</p><h3 id="2-2-本地安装"><a href="#2-2-本地安装" class="headerlink" title="2.2 本地安装"></a>2.2 本地安装</h3><p>要安装<strong>最新</strong>版本</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -D webpack-D 实际上是简写  --dev-savedevDependencies 开发时的依赖  webpackdependencies 永久的依赖  jquerywebpack版本与版本之间 差异是有</code></pre><p>要安装<strong>特定</strong>版本</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -D webpack@<span class="token operator">&lt;</span>version<span class="token operator">></span></code></pre><p>如果你使用Webpack 4+ 版本, 你还需要安装CLI.</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -D webpack-cli</code></pre><p><strong>对于大多数项目, 我们建议本地安装.</strong>这可以使我们在引入破坏式变更的依赖时,更容易分别升级项目.通常,Webpack通过运行一个或多个npm scripts, 会在本地 node_modules 目录中查找安装的Webpack:</p><pre class=" language-bash"><code class="language-bash"><span class="token string">"script"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"start"</span><span class="token keyword">:</span> <span class="token string">"webpack --config webpack.config.js"</span><span class="token punctuation">}</span></code></pre><blockquote><p>当你在本地安装webpack后, 你能够从 node_modules/.bin/webpack 访问它的bin版本.</p></blockquote><h3 id="2-3-全局安装"><a href="#2-3-全局安装" class="headerlink" title="2.3 全局安装"></a>2.3 全局安装</h3><p>以下的NPM安装方式, 将使webpack在全局环境下可用:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g webpack</code></pre><h3 id="2-4-配置项简介"><a href="#2-4-配置项简介" class="headerlink" title="2.4 配置项简介"></a>2.4 配置项简介</h3><ol><li><p><strong>Entry</strong></p><p><strong>入口文件配置</strong>,Webpack执行构建的第一步将从<strong>entry</strong>开始,完成整个工程的打包</p></li><li><p><strong>Module</strong></p><p>模块,在Webpack里,一切皆模块,Webpack会从配置的<strong>entry</strong>开始递归找出所有依赖的模块,最常用的是<strong>rules</strong>配置项,功能是匹配对应的后缀,从而针对代码文件完成格式转换和压缩合并等指定的操作.</p></li><li><p><strong>Loader</strong></p><p>模块转换器,用于把模块原内容按照需求转换成新内容,这个是配合Module模块中的rules中的配置项来使用.</p></li><li><p><strong>Plugins</strong></p><p>扩展插件,在Webpack构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要做的事情.(插件API)</p></li><li><p><strong>Output</strong></p><p>输出结果,在Webpack经过一系列处理并得出最终想要的代码后输出结果,配置项用于指定输出文件夹,默认是<code>./dist</code></p></li></ol><h3 id="2-5-总结"><a href="#2-5-总结" class="headerlink" title="2.5 总结"></a>2.5 总结</h3><p>安装webpack的前提条件是要安装Node.js</p><p>我们推荐本地安装webpack, 命令是: npm install -D webpack webpack-cli</p><h2 id="chapter-3-起步"><a href="#chapter-3-起步" class="headerlink" title="chapter 3: 起步"></a>chapter 3: 起步</h2><h3 id="3-1-基本安装"><a href="#3-1-基本安装" class="headerlink" title="3.1 基本安装"></a>3.1 基本安装</h3><p>首先我们创建一个目录, 初始化npm,然后在本地安装webpack,接着安装webpack-cli(此工具用于在命令行中运行webpack):</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> start <span class="token function">npm</span> init -y<span class="token function">npm</span> <span class="token function">install</span> webpack webpack-cli -D</code></pre><p>现在我们将创建以下目录结构 文件 和内容:</p><p><strong>project:</strong> </p><pre><code> handleA  |- index.html  |- /src    |- index.js    |- mixin.js</code></pre><p><strong>src/mixin.js</strong> </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">content</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'Hello, '</span> <span class="token operator">+</span> con<span class="token punctuation">;</span>  <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>src/index.js</strong> </p><pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>index.html</strong> </p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>起步<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- index.js 依赖mixin  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./src/mixin.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 只有先引入mixin 才可以让index.js正常执行 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./src/index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 以上引入方式的问题:   如果依赖不存在,或者引入顺序错误, 应用程序将无法正常运行.  如果依赖被引入但是并没有使用,浏览器将被迫下载无用代码  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="3-2-创建一个main文件"><a href="#3-2-创建一个main文件" class="headerlink" title="3.2 创建一个main文件"></a>3.2 创建一个main文件</h3><p>首先，我们稍微调整下目录结构，将“源”代码(<code>/src</code>)从我们的“分发”代码(<code>/dist</code>)中分离出来。“源”代码是用于书写和编辑的代码。“分发”代码是构建过程产生的代码最小化和优化后的“输出”目录，最终将在浏览器中加载： </p><p><strong>project</strong> </p><pre><code>  handleB  |- package.json  |- .npmrc  |- /dist    |- index.html  |- /src    |- index.js    |- mixin.js</code></pre><p>刚才我们通过两次script标签 引入 并确定了两个js文件的先后顺序.下面我们通过import 或者 require 方式引入mixin.js</p><p><strong>src/index.js</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// var content = require('./mixin');</span><span class="token keyword">import</span>  content  <span class="token keyword">from</span> <span class="token string">"./mixin"</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>src/mixin.js</strong></p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>con<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'Hello, '</span> <span class="token operator">+</span> con<span class="token punctuation">;</span>  <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>.npmrc</strong></p><pre class=" language-shell"><code class="language-shell">registry=https://registry.npm.taobao.org</code></pre><h3 id="3-3-使用一个配置文件"><a href="#3-3-使用一个配置文件" class="headerlink" title="3.3 使用一个配置文件"></a>3.3 使用一个配置文件</h3><p>在webpack 4 中,可以无须任何配置使用, 然而大多数项目会需要很复杂的设置, 这就是为什么 webpack 仍然需要支持 配置文件.  这比在终端(terminal)中手动输入大量命令要高效的多.接下来我们看看配置文件怎么写?</p><p><strong>project</strong> </p><pre><code>  handleC  |- package.json  |- webpack.config.js  |- /dist    |- index.html  |- /src    |- index.js    |- mixin.js</code></pre><p><strong>webpack.config.js</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 打包的入口点</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 打包的输出点</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 打包之后输出文件的名称</span>    filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 打包之后输出文件的路径</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>src/index.js</strong></p><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">var</span> content <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./mixin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>src/mixin.js</strong></p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>con<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'Hello, '</span> <span class="token operator">+</span> con<span class="token punctuation">;</span>  <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-总结"><a href="#3-4-总结" class="headerlink" title="3.4 总结"></a>3.4 总结</h3><p>webpack 的基本使用方式 </p><ol><li>创建webpack.config.js</li><li>指定项目打包的入口</li><li>指定项目打包后文件的名称和输出路径</li></ol><h2 id="chapter-4-配置代码错误源"><a href="#chapter-4-配置代码错误源" class="headerlink" title="chapter 4: 配置代码错误源"></a>chapter 4: 配置代码错误源</h2><p><img src="/images/1530470953644.png" alt="1530470923756"></p><p><strong>webpack.config.js</strong></p><pre class=" language-js"><code class="language-js">devtool<span class="token punctuation">:</span> <span class="token string">'inline-source-map'</span></code></pre><p><img src="/images/1530471203270.png" alt="1530471203270">|</p><h2 id="chapter-5-加载CSS"><a href="#chapter-5-加载CSS" class="headerlink" title="chapter 5: 加载CSS"></a>chapter 5: 加载CSS</h2><h3 id="5-1-下载包"><a href="#5-1-下载包" class="headerlink" title="5.1 下载包"></a>5.1 下载包</h3><pre><code>npm install -D style-loader css-loader</code></pre><h3 id="5-2-引入资源"><a href="#5-2-引入资源" class="headerlink" title="5.2  引入资源"></a>5.2  引入资源</h3><p><strong>src/js/index.js</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 引入css</span><span class="token keyword">import</span> <span class="token string">'../css/main.css'</span></code></pre><h3 id="5-3-配置webpack-config-js"><a href="#5-3-配置webpack-config-js" class="headerlink" title="5.3 配置webpack.config.js"></a>5.3 配置webpack.config.js</h3><pre class=" language-javascript"><code class="language-javascript"> module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">// 处理css</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span></code></pre><h2 id="chapter-6-加载图片"><a href="#chapter-6-加载图片" class="headerlink" title="chapter 6: 加载图片"></a>chapter 6: 加载图片</h2><h3 id="6-1-下载包"><a href="#6-1-下载包" class="headerlink" title="6.1 下载包"></a>6.1 下载包</h3><pre class=" language-shell"><code class="language-shell">npm install -D file-loader</code></pre><h3 id="6-2-引入资源"><a href="#6-2-引入资源" class="headerlink" title="6.2 引入资源"></a>6.2 引入资源</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> imgSrc <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../image/chrome.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="6-3-配置webpack-config-js"><a href="#6-3-配置webpack-config-js" class="headerlink" title="6.3 配置webpack.config.js"></a>6.3 配置webpack.config.js</h3><pre class=" language-javascript"><code class="language-javascript">  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpe?g|gif|svg)$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'file-loader'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span></code></pre><h2 id="chapter-7-加载字体"><a href="#chapter-7-加载字体" class="headerlink" title="chapter 7: 加载字体"></a>chapter 7: 加载字体</h2><h3 id="7-1-下载字体"><a href="#7-1-下载字体" class="headerlink" title="7.1 下载字体"></a>7.1 下载字体</h3><p><img src="/images/1530471828957.png" alt="1530471828957">|</p><h3 id="7-2-定义字体"><a href="#7-2-定义字体" class="headerlink" title="7.2 定义字体"></a>7.2 定义字体</h3><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'wanlum'</span><span class="token punctuation">;</span>  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url("../fonts/Raleway.ttf")</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="7-3-使用字体"><a href="#7-3-使用字体" class="headerlink" title="7.3 使用字体"></a>7.3 使用字体</h3><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'wanlum'</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="7-4-配置webpack-config-js"><a href="#7-4-配置webpack-config-js" class="headerlink" title="7.4 配置webpack.config.js"></a>7.4 配置webpack.config.js</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(woff|woff2|eot|ttf|otf)$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token string">'file-loader'</span>        <span class="token punctuation">]</span>  <span class="token punctuation">}</span></code></pre><h2 id="chapter-8-编译ES6"><a href="#chapter-8-编译ES6" class="headerlink" title="chapter 8: 编译ES6"></a>chapter 8: 编译ES6</h2><h3 id="8-1-下载包"><a href="#8-1-下载包" class="headerlink" title="8.1 下载包"></a>8.1 下载包</h3><pre><code>npm install -D babel-cli babel-preset-env babel-loader</code></pre><h3 id="8-2-编辑配置文件-babelrc"><a href="#8-2-编辑配置文件-babelrc" class="headerlink" title="8.2 编辑配置文件 .babelrc"></a>8.2 编辑配置文件 .babelrc</h3><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"env"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="8-3-配置webpack-config-js"><a href="#8-3-配置webpack-config-js" class="headerlink" title="8.3 配置webpack.config.js"></a>8.3 配置webpack.config.js</h3><pre class=" language-javascript"><code class="language-javascript"> <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">{</span>          loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="chapter-9-less编译成css"><a href="#chapter-9-less编译成css" class="headerlink" title="chapter 9: less编译成css"></a>chapter 9: less编译成css</h2><h3 id="9-1-下载包"><a href="#9-1-下载包" class="headerlink" title="9.1 下载包"></a>9.1 下载包</h3><pre><code>npm install less-loader less -D</code></pre><h3 id="9-2-配置包"><a href="#9-2-配置包" class="headerlink" title="9.2 配置包"></a>9.2 配置包</h3><pre class=" language-javascript"><code class="language-javascript">   <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h2 id="chapter-10-html自动生成"><a href="#chapter-10-html自动生成" class="headerlink" title="chapter 10: html自动生成"></a>chapter 10: html自动生成</h2><h3 id="10-1-下载包"><a href="#10-1-下载包" class="headerlink" title="10.1 下载包"></a>10.1 下载包</h3><pre><code>npm install -D html-webpack-plugin</code></pre><h3 id="10-2-引入包"><a href="#10-2-引入包" class="headerlink" title="10.2 引入包"></a>10.2 引入包</h3><pre><code>const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);</code></pre><h3 id="10-3-配置包"><a href="#10-3-配置包" class="headerlink" title="10.3 配置包"></a>10.3 配置包</h3><pre><code> plugins: [    new HtmlWebpackPlugin({      title: &#39;使用HtmlWebpackPlugin&#39;    })  ]</code></pre><h2 id="chapter-11-清理dist目录"><a href="#chapter-11-清理dist目录" class="headerlink" title="chapter 11: 清理dist目录"></a>chapter 11: 清理dist目录</h2><h3 id="11-1-下载包"><a href="#11-1-下载包" class="headerlink" title="11.1 下载包"></a>11.1 下载包</h3><pre><code>npm install -D clean-webpack-plugin</code></pre><h3 id="11-2-引入包"><a href="#11-2-引入包" class="headerlink" title="11.2 引入包"></a>11.2 引入包</h3><pre><code>const CleanWebpackPlugin = require(&#39;clean-webpack-plugin&#39;);</code></pre><h3 id="11-3-配置包"><a href="#11-3-配置包" class="headerlink" title="11.3 配置包"></a>11.3 配置包</h3><pre><code>   new CleanWebpackPlugin([&#39;dist&#39;])</code></pre><h2 id="chapter-12-自动编译实时加载"><a href="#chapter-12-自动编译实时加载" class="headerlink" title="chapter 12: 自动编译实时加载"></a>chapter 12: 自动编译实时加载</h2><h3 id="12-1-下载包"><a href="#12-1-下载包" class="headerlink" title="12.1 下载包"></a>12.1 下载包</h3><pre class=" language-shell"><code class="language-shell">npm install -D webpack-dev-server</code></pre><h3 id="12-2-配置包"><a href="#12-2-配置包" class="headerlink" title="12.2 配置包"></a>12.2 配置包</h3><pre class=" language-js"><code class="language-js">devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    contentBase<span class="token punctuation">:</span> <span class="token string">'./dist'</span><span class="token punctuation">}</span></code></pre><h3 id="12-3-配置启动项"><a href="#12-3-配置启动项" class="headerlink" title="12.3 配置启动项"></a>12.3 配置启动项</h3><pre class=" language-shell"><code class="language-shell">"start": "webpack-dev-server --config webpack.config.js"</code></pre><h2 id="chapter-13-热替换"><a href="#chapter-13-热替换" class="headerlink" title="chapter 13: 热替换"></a>chapter 13: 热替换</h2><h3 id="13-1-配置"><a href="#13-1-配置" class="headerlink" title="13.1 配置"></a>13.1 配置</h3><pre class=" language-javascript"><code class="language-javascript">  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'使用HtmlWebpackPlugin'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'dist'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NamedModulesPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>   devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>     contentBase<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     hot<span class="token punctuation">:</span> <span class="token boolean">true</span>   <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack入门到放弃 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
