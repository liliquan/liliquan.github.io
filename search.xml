<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>PHP常见面试题、laravel</title>
      <link href="/2018/12/21/chang-jian-mian-shi-ti-zong-jie/"/>
      <url>/2018/12/21/chang-jian-mian-shi-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="框架中的路由分发的作用是什么"><a href="#框架中的路由分发的作用是什么" class="headerlink" title="框架中的路由分发的作用是什么?"></a>框架中的路由分发的作用是什么?</h4><pre><code>将浏览器请求的url解析到控制器方法中</code></pre><h4 id="描述一下无限极分类算法的过程"><a href="#描述一下无限极分类算法的过程" class="headerlink" title="描述一下无限极分类算法的过程"></a>描述一下无限极分类算法的过程</h4><pre><code>先找出第一个顶级分类、然后再找它的一个子类、直到将所有的子类都查找完成，因为这个过程是重复的、所以可以使用递归来实现</code></pre><h4 id="怎么实现分页时保留搜索条件"><a href="#怎么实现分页时保留搜索条件" class="headerlink" title="怎么实现分页时保留搜索条件"></a>怎么实现分页时保留搜索条件</h4><pre><code>一、将搜索条件附带到分页URL上、但是URL上的参数使用$_GET接收，搜索表单以POST方式提交、所以搜索表单的参数使用$_POST接收、为了兼容接收$_GET和$_POST的参数，直接使用$_REQUEST来接收搜索参数、get和post的参数名字保持相同方便$_REQUEST处理二、直接把搜索条件放到session中</code></pre><h4 id="如何实现用户的自动登录"><a href="#如何实现用户的自动登录" class="headerlink" title="如何实现用户的自动登录"></a>如何实现用户的自动登录</h4><pre class=" language-php"><code class="language-php">用户登录以后，将用户的<span class="token constant">ID</span>使用<span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数保存到客户端，指定保存时长，为了确保保存的cookie中的用户id不被纂改，将id加密后放入cookie中，使用时再到服务端解密<span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3600</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">,</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3600</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="单例模式和单利工厂模式的区别"><a href="#单例模式和单利工厂模式的区别" class="headerlink" title="单例模式和单利工厂模式的区别"></a>单例模式和单利工厂模式的区别</h4><pre><code>单例模式是创建一个类的单例对象、单例工厂创建的是任意类的单例对象</code></pre><h4 id="类名由几个部分组成"><a href="#类名由几个部分组成" class="headerlink" title="类名由几个部分组成"></a>类名由几个部分组成</h4><pre><code>类名由类的名字和类的名字空间两部分组成</code></pre><h4 id="为什么项目需要划分目录，按什么规则进行划分？"><a href="#为什么项目需要划分目录，按什么规则进行划分？" class="headerlink" title="为什么项目需要划分目录，按什么规则进行划分？"></a>为什么项目需要划分目录，按什么规则进行划分？</h4><pre><code>文件随意放置会导致项目的变得复杂，降低开发效率一般按照文件的类别进行划分，使同一个类的文件在同一个目录中，ex：控制器文件放在一个目录，模型放在一个目录</code></pre><h4 id="配置文件单独拿出来放到特定的文件中保存的意义"><a href="#配置文件单独拿出来放到特定的文件中保存的意义" class="headerlink" title="配置文件单独拿出来放到特定的文件中保存的意义?"></a>配置文件单独拿出来放到特定的文件中保存的意义?</h4><pre><code>为了方便在部署时修改配置。因为配置文件在不同的开发者或者是不同的服务器上都不同比如数据库的密码，一般的开发者的数据库的密码都不一样，在运行前首要的任务就是修改数据库密码。在配置文件中更便于管理</code></pre><h4 id="常量在框架中的注意事项？"><a href="#常量在框架中的注意事项？" class="headerlink" title="常量在框架中的注意事项？"></a>常量在框架中的注意事项？</h4><pre><code>1.必须在使用之前先定义2.一旦定义后，在所有的作用域中都能访问到3.定义常量名时，一般为大写</code></pre><p>####单一入口的优点</p><pre><code>单一入口的好处就是使项目整体比较规范，因为同一个入口，往往不同操作之间有相同的规则控制起来比较灵活，比如权限控制，用户登录的操作和判断就可以统一处理了</code></pre><h4 id="使用htmlpurifier过滤html的优点是什么？"><a href="#使用htmlpurifier过滤html的优点是什么？" class="headerlink" title="使用htmlpurifier过滤html的优点是什么？"></a>使用<code>htmlpurifier</code>过滤html的优点是什么？</h4><pre class=" language-html"><code class="language-html">可以精准控制html代码的接口、比如可以配置允许指定html标签、标签的属性、标签属性的值</code></pre><p>####Redis有几种持久化的方式？redis的缺点是什么？</p><pre class=" language-redis"><code class="language-redis">两种，分别是RDB和AOFRDB:在指定的时间间隔内将内存中的数据集快照写入磁盘，先将数据写入临时文件，写入成功以后，再替换掉之前的文件，进行二进制压缩AOF：以日志的形式记录服务器所处理的每一个写、删操作，查询操作不会记录，以文本的方式记录，打开可以看到详细的操作记录缺点：数据库容量容易收到物理内存的限制，不能用作海量数据的高性能读写redis适合的场景局限在较小数据量的高性能操作和运算。常用的五种数据类型：string,hash,List,集合，有序集合List用作秒啥时的队列</code></pre><h4 id="前后端的数据不一致时怎么处理"><a href="#前后端的数据不一致时怎么处理" class="headerlink" title="前后端的数据不一致时怎么处理?"></a>前后端的数据不一致时怎么处理?</h4><pre><code>后台更新数据、同时更新或者删除前台的缓存、检查MySQL集群网络环境</code></pre><h4 id="高并发如何处理？"><a href="#高并发如何处理？" class="headerlink" title="高并发如何处理？"></a>高并发如何处理？</h4><pre><code>需要对服务器的架构分层，重新布局，负载均衡，集群负载均衡策略：轮询技术：把客户端的请求轮流分发给服务器最少连接：负载均衡把请求给最空闲的服务器IP哈希：同一地址的客户端，始终请求同一台服务器</code></pre><h4 id="什么是Ajax，Ajax异步处理？"><a href="#什么是Ajax，Ajax异步处理？" class="headerlink" title="什么是Ajax，Ajax异步处理？"></a>什么是Ajax，Ajax异步处理？</h4><pre><code>Ajax是一种在页面没有刷新的情况下，通过浏览器与服务器交互的一种技术主要是由JavaScript来实现，最大的特点是：页面在不刷新的情况下请求</code></pre><h4 id="秒杀场景系统怎么优化？"><a href="#秒杀场景系统怎么优化？" class="headerlink" title="秒杀场景系统怎么优化？"></a>秒杀场景系统怎么优化？</h4><pre><code>1.把秒杀的商品放进redis队列中，当秒杀的用户过来时、依次从队列中取，没有取到的用户直接提示失败、取成功的用户直接跳转到订单页面2.提升服务器配置3.临时提升服务器网络带宽4.秒杀页面静态化5.减少http请求(将单独的css、js文件里的代码放进style和script标签，图片使用base64进行编码)</code></pre><h4 id="使用支付宝支付时有什么安全问题"><a href="#使用支付宝支付时有什么安全问题" class="headerlink" title="使用支付宝支付时有什么安全问题?"></a>使用支付宝支付时有什么安全问题?</h4><pre><code>支付宝的通知分为同步通知和异步通知，同步通知的参数是通过URL进行传递，存在被用户修改的风险。</code></pre><h4 id="使用短信和邮件验证时如何解决并发问题？"><a href="#使用短信和邮件验证时如何解决并发问题？" class="headerlink" title="使用短信和邮件验证时如何解决并发问题？"></a>使用短信和邮件验证时如何解决并发问题？</h4><pre><code>将发送短信的任务放入redis队列中，在定时任务从队列中取出短信、调用短信的发送发的接口将短信发送给用户</code></pre><p>####什么是脏数据？</p><pre><code>在数据库运行时，把未提交随后又被撤销的数据就是脏数据，从目标中取出的数据已经过期或者错误的数据</code></pre><h4 id="laravel中常用的函数有哪些？说说其所用？"><a href="#laravel中常用的函数有哪些？说说其所用？" class="headerlink" title="laravel中常用的函数有哪些？说说其所用？"></a>laravel中常用的函数有哪些？说说其所用？</h4><pre><code>url():根据路由生成url,route()通过路由名字生成url,action()通过控制器和方法的名字生成urlcsrf_token()：获取当前的csrf的token值csrf_field()：获取包含csrf的token值得表单隐藏域auth()：获取用于权限验证得对象dd()：打印变量，程序终止dump()：打印变量，程序不会终止执行env()：获取.env文件中的配置项的值redirect()：重定向request()：获取请求对象view()：获取视图对象config()：获取特定配置项的值</code></pre><h4 id="laravel获取请求对象的方法"><a href="#laravel获取请求对象的方法" class="headerlink" title="laravel获取请求对象的方法"></a>laravel获取请求对象的方法</h4><pre><code>在控制器的方法中使用类型限制Request $request助手方法：request()依赖注入容器：app(&#39;requset&#39;)或者app()-&gt;make(&#39;request&#39;)</code></pre><p>####laravel的控制器向视图传递变量的几种方式：</p><pre><code>view(&#39;视图名&#39;,[&#39;变量1&#39;=&gt;&#39;值1&#39;,&#39;变量1&#39;=&gt;&#39;值2&#39;])view(&#39;视图&#39;)-&gt;with(&#39;变量1&#39;=&gt;&#39;值1&#39;,&#39;变量1&#39;=&gt;&#39;值2&#39;)view::make(&#39;视图名&#39;,[&#39;变量1&#39;=&gt;&#39;值1&#39;,&#39;变量1&#39;=&gt;&#39;值2&#39;])view::make(&#39;视图名&#39;)-&gt;with([&#39;变量1&#39;=&gt;&#39;值1&#39;,&#39;变量1&#39;=&gt;&#39;值2&#39;])</code></pre><h4 id="composer"><a href="#composer" class="headerlink" title="composer"></a>composer</h4><pre><code>composer是PHP用来管理依赖关系的工具，根据composer根据声明的依赖的关系，从相关库的源下载代码脚本，并根据依赖关系在composer目录下生成供类自动加载的PHP脚本，使用时，从项目开始处引入&#39;/vender/autoload.php&#39;文件，就可以直接实例化第三方类库中的类了</code></pre><h4 id="laravel有哪些特性？"><a href="#laravel有哪些特性？" class="headerlink" title="laravel有哪些特性？"></a>laravel有哪些特性？</h4><pre><code>1.强大的route:简单的回调函数就可以调用，快速绑定controller和route2.artisan:强大的命令工具，手工变成自动3.可继承的模板，简化view的开发和管理4.blade模板:渲染速度快5.大量封装好的代码应对常见的开发任务，事件、队列、计划任务</code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP常见面试题、laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP常见面试题 </tag>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux</title>
      <link href="/2018/12/20/linux/"/>
      <url>/2018/12/20/linux/</url>
      
        <content type="html"><![CDATA[<h4 id="有一个系统平台PHP数据页面需要定时刷新以增加搜索引擎的友好性，该脚本的路径及名称为：-share-web-refresh-php，请尝试让Linux每天晚上12-00自动执行及早4-00自动运行程序？"><a href="#有一个系统平台PHP数据页面需要定时刷新以增加搜索引擎的友好性，该脚本的路径及名称为：-share-web-refresh-php，请尝试让Linux每天晚上12-00自动执行及早4-00自动运行程序？" class="headerlink" title="有一个系统平台PHP数据页面需要定时刷新以增加搜索引擎的友好性，该脚本的路径及名称为：/share/web/refresh.php，请尝试让Linux每天晚上12:00自动执行及早4:00自动运行程序？"></a>有一个系统平台PHP数据页面需要定时刷新以增加搜索引擎的友好性，该脚本的路径及名称为：/share/web/refresh.php，请尝试让Linux每天晚上12:00自动执行及早4:00自动运行程序？</h4><p>参考答案：</p><p>1.linux下执行PHP文件的命令为：php的安装路径 -f /share/web/refresh.php</p><p>2.编写shell脚本。refresh.sh</p><p>cd usr/local/php/bin</p><p>php share/web/refresh.sh</p><p>3.增加任务调度指令：crontab -e</p><p>0 12 <em> </em> <em> /refresh.sh的路径/refresh.sh<br>0 4 </em> <em> </em> /refresh.sh 的路径/refresh.sh</p><h4 id="有一个叫demo-php的文件，想看一下linux进程中这个脚本是否在执行需要执行的命令？"><a href="#有一个叫demo-php的文件，想看一下linux进程中这个脚本是否在执行需要执行的命令？" class="headerlink" title="有一个叫demo.php的文件，想看一下linux进程中这个脚本是否在执行需要执行的命令？"></a>有一个叫demo.php的文件，想看一下linux进程中这个脚本是否在执行需要执行的命令？</h4><pre class=" language-shell"><code class="language-shell">Ps -u|grep demo.php</code></pre><p>####常用vim命令详解</p><pre><code>vim模式：编辑模式，输入模式，末行模式1.模式转换：    i-在当前光标所在的字符前面，转换为输入模式。a-在当前光标所在的字符后面输入    o-在光标所在的行的下方新建一行并输入。I-在当前光标所在的行首输入    A-在当前光标所在的行末输入。O-在当前光标的上一行插入一行并输入    输入-&gt;编辑：ESC    编辑-&gt;莫行：ESC,ESC打开文件：    vim+# =&gt; 打开文件，并定位于#行    vim+：打开文件，定位至最后一行关闭文件：    末行模式关闭文件：:q 退出，:wq 保存退出，:q! 不保存退出，:w 保存，:w!强行保存    编辑模式下退出：ZZ 保存退出更改文件权限：chmod结束进程：kill -q删除文件：rm filename新建目录：mkdir文件移动：mv查看进程：ps在指定的路径下查找指定文件:find查找文件中包含hello的行：grep hello filename将文件的内容打印到标准输出:cat改变文件所属组：chgrp指定文件中的字节数、字数、行数统计输出：wc获取文件行数:wc -l filename输出文件的最后5行到另一个文件：tail -n 5 file1 &gt;&gt; file2把一个文件的内容追加到另一个文件的末尾：cat file1&gt;&gt;file2查看磁盘空间使用率：df查看系统进程：top移动光标：    k:上,j:下,h:左,l:右末行魔术：    . 表示当前行        s:最后一行    #:第#行    +#:向下的#行翻屏：    Ctrl+f: 向下翻一屏    Ctrl+b: 向上翻一屏  Ctrl+d: 向下翻半屏    Ctrl+u: 向上翻半屏粘贴命令 p    p: 如果删除或复制为整行内容，则粘贴至光标所在行的下方，如果复制或删除的内容为非整行，则粘贴至光标所在字符的后面复制命令 d    同p用法修改：先删除内容，再转换为输入模式    c:同p替换：r:单字符替换    #r:光标后#个字符全部替换  R:替换模式撤销编辑操作：u    u:撤销前一次的编辑操作。#u：直接撤销最近#次编辑操作    连续u可以撤销前次的n次操作    ctrl+r 撤销最近一次撤销操作查找：n：下一个。  N:上一个</code></pre><h4 id="Linux下建立压缩包，解压缩包命令"><a href="#Linux下建立压缩包，解压缩包命令" class="headerlink" title="Linux下建立压缩包，解压缩包命令"></a>Linux下建立压缩包，解压缩包命令</h4><pre class=" language-shell"><code class="language-shell">Gz:打包：tar czf file.tar.gz file.txt解压：tar xzf file.tar.gzBz:打包：tar zxvf file.tar.bz2 file.txt解压：tar zxvf fileGzip:打包：gzip file1.txt解压：gunzip file1.txt.gzZip打包：zip file1.zip file.txt解压：unzip file1.zip</code></pre><h4 id="linux下find命令和grep命令的区别"><a href="#linux下find命令和grep命令的区别" class="headerlink" title="linux下find命令和grep命令的区别"></a>linux下find命令和grep命令的区别</h4><pre><code>find：在磁盘/分区中找到文件，可以配type，可以配size time等，通过文件名和文件大小或访问时间找到指定文件grep：查找文件里符合条件的字符串，并把匹配的行打印出来，使用正则表达式</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mysql数据库基础总结</title>
      <link href="/2018/12/19/mysql/"/>
      <url>/2018/12/19/mysql/</url>
      
        <content type="html"><![CDATA[<h4 id="Mysql的存储引擎，myisam和innodb的区别"><a href="#Mysql的存储引擎，myisam和innodb的区别" class="headerlink" title="Mysql的存储引擎，myisam和innodb的区别"></a>Mysql的存储引擎，myisam和innodb的区别</h4><pre class=" language-mysql"><code class="language-mysql">文件构成：myisam由3个文件构成（表定义文件.frm、数据文件.MYD、索引.MYI），innodb由2个文件构成（表结构、数据结构）事务支持：myisam不支持事务，innodb支持事务和外键全文索引：myisam支持全文索引(英文) innodb不支持，但是从5.6开始也支持锁机制：myisam是表锁，innodb是行锁性能：myisam强调性能，查询效率高。innodb兵法处理能力高安全机制：myisam无法在灾难中恢复数据，innodb可以从灾难中恢复数据</code></pre><h4 id="Mysql中的数据类型varchar和char的主要区别是什么"><a href="#Mysql中的数据类型varchar和char的主要区别是什么" class="headerlink" title="Mysql中的数据类型varchar和char的主要区别是什么?"></a>Mysql中的数据类型varchar和char的主要区别是什么?</h4><pre class=" language-mysql"><code class="language-mysql">Char是定长，varchar是变长char(0-255)字符数，varchar(0-65535)char的存取效率高，因为长度不变，但是和varchar相比付出空间代价。char的存储方式是，对英文字符占用一个字节，对一个汉字占用两个字节varchar的存储方式是，对英文和汉字都占两个字节</code></pre><p>####如何在数据库中保存ip地址</p><pre><code>最简单的是用varchar来保存但是从效率来讲，可以保存为整型（int）转换为整型的函数：php函数：long2ip()  mysql函数：inet_aton()和inet_ntoa</code></pre><h4 id="什么是数据库索引？mysql索引类型有哪些？添加索引会对DML操作有什么影响？"><a href="#什么是数据库索引？mysql索引类型有哪些？添加索引会对DML操作有什么影响？" class="headerlink" title="什么是数据库索引？mysql索引类型有哪些？添加索引会对DML操作有什么影响？"></a>什么是数据库索引？mysql索引类型有哪些？添加索引会对DML操作有什么影响？</h4><pre class=" language-mysql"><code class="language-mysql">主键索引、唯一索引、普通索引、复合索引、全文索引影响：创建索引可以极大提高数据的查询速度，但是会降低插入、删除、更新表的速度，因为在执行这些操作的时候，还要操作索引文件知识扩展：DML(数据库操作语言)：insert、update、deleteDDL(数据定义语言)：create table 创建表、alter table 修改表、drop table 删除表                truncate table 删除表中所有行、create index 创建索引、drop index 删除索引DCL(数据库控制语言)</code></pre><h4 id="SQL中left-join-right-join-inner-join-的含义和区别是什么？"><a href="#SQL中left-join-right-join-inner-join-的含义和区别是什么？" class="headerlink" title="SQL中left join, right join, inner join 的含义和区别是什么？"></a>SQL中left join, right join, inner join 的含义和区别是什么？</h4><pre class=" language-mysql"><code class="language-mysql">left join(左连接)：左表为主表，左表中的记录都会出现在查询结果中，而右表没有匹配的记录则以null填充right join(右连接)：右表为主表，右表中的记录都会出现在查询结果中，而左表没有匹配的记录则以null填充inner join(内连接)：两张表的地位是平等的，符合连接条件的记录才会显示在结果中</code></pre><h4 id="优化mysql数据库的方法"><a href="#优化mysql数据库的方法" class="headerlink" title="优化mysql数据库的方法"></a>优化mysql数据库的方法</h4><pre class=" language-mysql"><code class="language-mysql">1.建表选择合适的字段属性2.使用连接（JOIN）来代替子查询3.使用联合（UNION）来代替手动创建临时表4.事务处理5.使用外键，优化锁定表6.建立索引，优化索引7.sql语句优化</code></pre><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><pre class=" language-mysql"><code class="language-mysql">alert table tablename add index ('字段名')</code></pre><p>####Mysql_fetch_row、mysql_fetch_assoc和mysql_fetch_array之间有什么区别？</p><pre class=" language-mysql"><code class="language-mysql">mysql_fetch_row()函数从结果集中取得一行作为数组mysql_fetch_assoc()函数从结果集中取得一条关联数组，不能像mysql_fetch_row 那样用索引来取值，只能用字段名字来取mysql_fetch_array(data,array_type)函数从结果集中取得一行作为关联数组，或数字数组，或二者兼得。        array_type规定哪种结果。mysql_assoc关联数组。mysql_num数字数组。mysql_both默认，同时产生三者之间的区别：mysql_fetch_assoc和mysql_fetch_array的区别就是：mysql_fetch_assoc()得到的结果是关联数组，mysql_fetch_array()得到的结果可以是关联数组和索引数组。</code></pre><h4 id="设定网站用户数量在千万级，但是活跃用户的数量很少，如何通过优化数据库来提高活跃用户的访问速度？"><a href="#设定网站用户数量在千万级，但是活跃用户的数量很少，如何通过优化数据库来提高活跃用户的访问速度？" class="headerlink" title="设定网站用户数量在千万级，但是活跃用户的数量很少，如何通过优化数据库来提高活跃用户的访问速度？"></a>设定网站用户数量在千万级，但是活跃用户的数量很少，如何通过优化数据库来提高活跃用户的访问速度？</h4><pre><code>根据用户的活跃程度，建立新的活跃用户表，将平时活跃的用户提取出来放到活跃用户表，这样每次在活跃用户登录时就可以直接到活跃用户表中查询</code></pre><p>####SQL注入产生的原因，如何预防</p><pre><code>原因：在开发过程中不注意规范使用sql，没有对一些特殊字符进行过滤防止sql注入：1.过滤掉一下常见的数据库操作关键字：select,delete,update,insert等2.通过系统函数：addalashes(需要被过滤的内容)来进行过滤3.书写sql语句时尽量不要省略小引号和单引号4.开启PHP安全模式，safe_mode = on5.使用pdo预处理</code></pre><p>####Mysql数据库中的事务是什么？</p><pre><code>事务是指逻辑上的一组操作，要么全部成功，要么全部不成功。事务就是一段sql语句的批处理，是一个原子，不可分割。</code></pre><h4 id="为什么使用事务？如何在mysql中使用事务？"><a href="#为什么使用事务？如何在mysql中使用事务？" class="headerlink" title="为什么使用事务？如何在mysql中使用事务？"></a>为什么使用事务？如何在mysql中使用事务？</h4><pre><code>现在的很多软件都是多用户，多线程，多程序，对同一个表可能同时有很多人在操作，为了保持数据的一致性，所以提出了事务这个概念。1.用begin.rollback.commit来实现2.直接set来改变mysql的自动提交模式mysql默认是自动提交，也就是提交一个jquery，就直接执行，可以通过set autocommit = 0 禁止自动提交set autocommit = 1 开启自动提交****注意：如果使用set autocommit = 0时，以后的sql都将作为事务处理。知道用rollback或者commit确认。当结束这个事务的同时也开启了新的事务</code></pre><p>####事务的四大特性</p><pre><code>原子性：事务是不可分割最小单元，一致性：在事务处理执行前后，数据库的是一致的持续性：一个事物的处理对另一个事务的处理是没有任何影响的。隔离性：事务的效果能够被永久的保存下来。</code></pre><p>####mysql数据库作为发布系统的存储，一天五万以上的增量，预计运维三年，如何做优化？</p><pre><code>1.设计良好的数据库结构，允许部分数据冗余，尽量避免join查询，提高效率2.选择合适的表字段类型和存储引擎，适当添加索引3.mysql库主从读写分离4.找规律分表，减少单表中的数据量提高查询速度5.添加缓存机制6.不经常改动的页面，生成静态页7.高质量的sql语句</code></pre><h4 id="项目中优化sql语句执行效率的方法，从哪些方面？sql语句性能如何分析？"><a href="#项目中优化sql语句执行效率的方法，从哪些方面？sql语句性能如何分析？" class="headerlink" title="项目中优化sql语句执行效率的方法，从哪些方面？sql语句性能如何分析？"></a>项目中优化sql语句执行效率的方法，从哪些方面？sql语句性能如何分析？</h4><pre><code>1.尽量使用单表查询2.给频繁使用的字段添加索引3.避免使用select * 和 like &quot;%xxx%&quot;查询4.当只需要一行数据时，使用limit针对比较慢的查询语句，可以使用explain来分析该语句具体的执行情况</code></pre>]]></content>
      
      
      <categories>
          
          <category> Mysql数据库基础知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Mysql数据库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP知识总结</title>
      <link href="/2018/12/19/php-ba-gao/"/>
      <url>/2018/12/19/php-ba-gao/</url>
      
        <content type="html"><![CDATA[<h4 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h4><pre><code>什么是浏览器内核？    浏览器内核可大概翻译成渲染引擎，主要负责对网页语法的解释和渲染网页。在浏览器中的作用是什么？    浏览器内核对于浏览器而言，是基础，是依托。如果没有浏览器内核，那么浏览器就无法独立存在且产生作用。    它的存在，决定了网页的呈现内容、格式以及显示效果。    所以说一个好的浏览器一定是基于一个稳定、高端、作用明显的浏览器内核。四大浏览器内核：    Trident内核、Gecko内核、WebKit内核、Blink内核Trident内核常见的浏览器：IE6、IE7、IE8(Trident4.0)、IE9(Trident5.0)、IE10（Trident6.0）GECKO内核：火狐浏览器。（开源，开发程度高）WEBKIT内核：是苹果公司自主研发的内核。safari浏览器使用的内核。开源。BLINK内核：是由Google和Opera开发的浏览器排版引擎。</code></pre><h4 id="CSS-HACK是什么"><a href="#CSS-HACK是什么" class="headerlink" title="CSS HACK是什么"></a>CSS HACK是什么</h4><pre><code>由于不同的浏览器对css的支持、解析不一样，导致在不同浏览器的环境中呈现不一致的页面展现效果。这时，我们为了获取统一的页面效果，就需要针对不同浏览器或不同版本些特定的css样式，我们把这个针对不同浏览器、不同版本写相应的css code的过程叫做css hack</code></pre><h4 id="常用HTTP状态码"><a href="#常用HTTP状态码" class="headerlink" title="常用HTTP状态码"></a>常用HTTP状态码</h4><pre><code>2字头：成功；3字头：重定向；4字头：请求错误；5字头：服务器错误200-表示动作被成功接收、理解和接受204-请求收到，但返回信息为空300-请求资源可在多处得到301-本网页被永久性转移到另一个URL305-请求的资源必须从服务器指定的地址得到307-申明请求的资源被临时性删除400-客户端请求有语法错误，不能被服务器所理解401-请求未经授权403-禁止访问，服务器收到请求，但是拒绝提供服务404-一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在500-服务器错误，无法完成请求</code></pre><h4 id="javascript中一个按钮绑定两个onclick事件"><a href="#javascript中一个按钮绑定两个onclick事件" class="headerlink" title="javascript中一个按钮绑定两个onclick事件"></a>javascript中一个按钮绑定两个onclick事件</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"row"</span> id<span class="token operator">=</span><span class="token string">"row"</span> onclick<span class="token operator">=</span><span class="token string">"A();B()"</span><span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="简述无限分类的实现原理"><a href="#简述无限分类的实现原理" class="headerlink" title="简述无限分类的实现原理"></a>简述无限分类的实现原理</h4><pre><code>表设计：在表中添加一个parient_id来记录上级分类id，顶级分类则为0;树形结构：利用递归函数，将分类数据按上下级关系排序</code></pre><h4 id="打开php-ini中safe-mode，会影响哪些参数？"><a href="#打开php-ini中safe-mode，会影响哪些参数？" class="headerlink" title="打开php.ini中safe_mode，会影响哪些参数？"></a>打开php.ini中safe_mode，会影响哪些参数？</h4><pre><code>safe_mode是php的安全模式，安全模式提供一个基本安全的共享环境。在一个当有多个账户存在的php开放的web服务器，当服务器上运行的php打开了安全模式，那么一些函数将被完全禁止，一些尝试访问文件系统的函数功能将被限制。chdir,redir,mkdir,rename,fopen,unlink,move_uploaded_file</code></pre><h4 id="对PHP命名空间的理解"><a href="#对PHP命名空间的理解" class="headerlink" title="对PHP命名空间的理解"></a>对PHP命名空间的理解</h4><pre><code>命名空间是一种封装事务的抽象方法，空间是虚拟的，主要用来解决类、函数、常量名字的冲突问题命名空间的引入机制：使用关键字use</code></pre><p>####用PHP写出一个安全的用户登录系统需要注意哪些方面？</p><pre><code>密码使用md5进行加密登录后台处理数据时，进行过滤，防止sql注入验证数据是否来自本站使用验证码进行登录，防止破解</code></pre><h4 id="如何实现多个线程安全的写入一个文件数据"><a href="#如何实现多个线程安全的写入一个文件数据" class="headerlink" title="如何实现多个线程安全的写入一个文件数据"></a>如何实现多个线程安全的写入一个文件数据</h4><pre><code>采用锁机制，当一个用户在对此文件进行读写操作时，将此文件锁定，操作完毕后将锁解除在用户操作过程中，其他用户不能进行操作，需要等待前一个用户操作完毕</code></pre><h4 id="GD库是做什么的？"><a href="#GD库是做什么的？" class="headerlink" title="GD库是做什么的？"></a>GD库是做什么的？</h4><pre><code>GD库是php处理图形的扩展库，提供了一系列用来处理图片的API，使用GD库可以处理图片，生成图片，也可以加水印在网站上GD库通常用来生成缩略图或者用来对图片加水印或者对网站数据生成报表</code></pre><h4 id="MVC的理解"><a href="#MVC的理解" class="headerlink" title="MVC的理解"></a>MVC的理解</h4><pre><code>m-模型，v-视图，c-控制器由模型发出要实现的功能到控制器，控制器接收组织功能传递给视图mvc是一个设计模式。强制将程序的输入、处理、输出分开视图是用户看到并与之交互的页面模型表示企业数据和业务规则控制器接收用户的输入并调用模型和视图去完成用户的需求</code></pre><h4 id="MVC的优缺点"><a href="#MVC的优缺点" class="headerlink" title="MVC的优缺点"></a>MVC的优缺点</h4><pre><code>优点：可适用性强，较低的周期成本，重用性高，快速部署，可维护性、扩展性、有利于软件工程化管理缺点：代码量大，系统结构和实现的复杂，不太适合小型，中型规模的应用程序（如果我们只是简单的查询数据库，如果不分层设计我们直接从视图层到模型层去访问，效率会提高，如果代码复杂性为代价，多了一层，代码量增大，开发效率就低了）</code></pre><h4 id="PHP如何抛出和接收错误"><a href="#PHP如何抛出和接收错误" class="headerlink" title="PHP如何抛出和接收错误"></a>PHP如何抛出和接收错误</h4><pre><code>使用try...catch异常代码放在try代码块中，如果没有抛出异常，则继续执行如果触发异常，就抛出异常，catch代码块捕获异常，并创建一个异常信息对象，$e-&gt;getMessage(),输出异常信息</code></pre><p>####实现中文字串截取无乱码的方法</p><pre><code>1.使用mbstring扩展库的mb_substr截取就不会出现乱码了。2.自己书写截取函数，但效率不如用mbstring扩展库来得高。3.如果仅是为了输出截取的串，可用如下方式实现：substr($str, 0, 30).chr(0)。substr(string,start,length)start:必须的，规定字符串从何处开始截取，正数-在字符串的指定位置开始。负数-从字符串的结尾开始。0-从头第一个开始**************mb_substr和mb_strcut的区别****************mb_substr是按字来切分字符。。mb_strcut是按字节来切分字符。两者在php.ini中打开php_mbstring.dll</code></pre><h4 id="网站高并发、大流量访问的处理及解决方案"><a href="#网站高并发、大流量访问的处理及解决方案" class="headerlink" title="网站高并发、大流量访问的处理及解决方案"></a>网站高并发、大流量访问的处理及解决方案</h4><pre><code>1.首先确定当前的服务器硬件是否能够支持当前的流量2.优化数据库访问，前台能静态化就最好，但是访问比较频繁的网站，静态化也不能完全解决问题。3.缓存技术就是另一个解决方式，将常用的数据和动态的数据放入缓存文件，在需要用到这些数据时，直接去缓存取。4.如果无法避免访问数据库，那就尝试优化数据库查询和数据库结构，尽量做到：要什么取什么，遵循小表为主，附表为辅，查询条件先索引，先小后大，提高查询速度5.禁止外部网站的图片或者文件，可以简单通过referer来控制盗链。apache可以通过配置来禁止盗链。6.控制大文件的下载，尽量不要提供超过2M的大文件下载，如果需要，可以将大文件放在另外一台服务器上7.使用流量分析软件统计软件，可以及时知道哪些地方流量大，哪些地方需要优化。Google Analytics</code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP技能拔高、基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP知识总结 </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP基础知识总结</title>
      <link href="/2018/12/17/php/"/>
      <url>/2018/12/17/php/</url>
      
        <content type="html"><![CDATA[<h4 id="PHP的意思，它能干些什么"><a href="#PHP的意思，它能干些什么" class="headerlink" title="PHP的意思，它能干些什么"></a>PHP的意思，它能干些什么</h4><pre><code>PHP（超文本预处理）是一种被广泛应用开放源代码的多用途脚本语言，可嵌入HTML中，尤其适合Web开发PHP能做很多事，主要用于服务端的脚本程序，因此可以用来完成其它CGI程序能够完成的工作ex：收集表单数据，生成动态网页</code></pre><h4 id="说明PHP中传值和传引用的区别，说明什么时候传值，什么时候用引用。"><a href="#说明PHP中传值和传引用的区别，说明什么时候传值，什么时候用引用。" class="headerlink" title="说明PHP中传值和传引用的区别，说明什么时候传值，什么时候用引用。"></a>说明PHP中传值和传引用的区别，说明什么时候传值，什么时候用引用。</h4><pre><code>传值：就是将变量的值拷贝一份赋值给另一个变量，改变任何一个变量的值都不会影响到另一个传引用：将变量的值的内存地址传给另一个变量，新变量引用了原始变量，两个变量同时指向了同一个值，改动会相互影响对于比较大的数据，传引用比较好，可以节省内存开销</code></pre><h4 id="PHP在服务器端进行页面重定向所使用的函数名称"><a href="#PHP在服务器端进行页面重定向所使用的函数名称" class="headerlink" title="PHP在服务器端进行页面重定向所使用的函数名称"></a>PHP在服务器端进行页面重定向所使用的函数名称</h4><pre><code>header()ex:header(&quot;Localhost:http://www.example.com/&quot;);header(&quot;HTTP/1.0 404 NOT Found&quot;);</code></pre><h4 id="什么是面向对象，主要特征是什么？"><a href="#什么是面向对象，主要特征是什么？" class="headerlink" title="什么是面向对象，主要特征是什么？"></a>什么是面向对象，主要特征是什么？</h4><pre><code>面向对象简称OOP，对象就是人对各种具体事物抽象之后的概念。人们每天都在跟各种对象打交道，就比如：一台电脑；而对象有很多特性：内存，宽度，颜色...这些就是属性，而对象还有很多功能：听歌，看视频，打电话...这些就是方法，可以看成是一个函数但是对象不是独立的，还有继承性。在编程的过程中，我们可以把所有问题都看成是一个对象，但对象实际上就是一组数据的集合，并且都已经被命名，这些数据的根据就是对象的属性，可以被访问。但是如果要访问一个外部的对象我们就必须要先将它引进来。把数据及对数据的操作方法放在一起，作为一个相互依存的整体---对象。对同类对象抽象出其共性，形成类。类中的大多数数据，只能用本类中的方法进行处理。类通过一个简单的接口和外界发生关系，对象与对象之间通过消息进行通信。是一种设计方式，两个成员，一个属性，一个方法，有利于提高程序的重用性，使程序结构更加清晰特征：封装，继承，多态</code></pre><h4 id="SESSION和COOKIE的区别是什么，请从协议，产生的原因与作用声明"><a href="#SESSION和COOKIE的区别是什么，请从协议，产生的原因与作用声明" class="headerlink" title="SESSION和COOKIE的区别是什么，请从协议，产生的原因与作用声明"></a>SESSION和COOKIE的区别是什么，请从协议，产生的原因与作用声明</h4><pre><code>http无状态协议，不能区分用户是否是从同一个网站上来的，同一个用户请求不同的页面不能看作是同一个用户。cookie数据存放在客户的浏览器上，session数据放在服务器上。cookie安全性没有session高，别人可以分析本地的cookie进行cookie欺诈，考虑到安全应当使用session。session依赖于cookie进行传递，禁用cookie后。session不能正常使用。session会在一定时间内保存在服务器上，每次读取都要从服务器读取，如果访问量多的话，对服务器有资源消耗，考虑服务器性能，应当使用cookie将登陆信息等重要信息存放为SESSION其他信息如果需要保留，可以放在COOKIE中</code></pre><h4 id="get和post的区别"><a href="#get和post的区别" class="headerlink" title="get和post的区别"></a>get和post的区别</h4><pre><code>get 是把参数数据队列加到提交表单的ACTION属性所指的 URL 中，值和表单内各个字段一一对应，在URL中可以看到post是通过HTTP post机制，将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTION属性所指的URL地址。用户看不到这个过程。对于get方式，服务器端用Request.QueryString 获取变量的值，对于post方式，服务器端用 Request.Form 获取提交的数据。get传输的数据量比较小，不能大于2KB。post传输的数据量比较大，一般默认不受限制，但是理论上，IIS4中最大是80KB。IIS5最大为100KB。get安全性比较低，在URL中可以查看和修改post安全性能比较高。</code></pre><h4 id="简述cookie的设置及获取过程"><a href="#简述cookie的设置及获取过程" class="headerlink" title="简述cookie的设置及获取过程"></a>简述cookie的设置及获取过程</h4><pre><code>设置COOKIE的值：setcookie(名称,值,保存时间,有效域)获取值：$_COOKIE[&#39;名称&#39;];</code></pre><h4 id="几个预定义全局变量的作用？"><a href="#几个预定义全局变量的作用？" class="headerlink" title="几个预定义全局变量的作用？"></a>几个预定义全局变量的作用？</h4><pre><code>$_SERVER[&#39;DOCUMENT_ROOT&#39;]        //当前运行脚本所在的文档根目录$_SERVER[&#39;HTTP_HOST &#39;]            //当前请求的 Host: 头部的内容$_SERVER[&#39;REMOTE_ADDR&#39;]            //正在浏览当前页面用户的 IP 地址$_SERVER[&#39;HTTP_REFERER&#39;]         //链接到当前页面的前一页面的 URL 地址$_SERVER[&#39;SERVER_NAME&#39;]            //当前运行脚本所在服务器主机的名称$_FILES                           //包含有所有上传的文件信息S_FILES[&#39;userfile&#39;][&#39;name&#39;]        //客户端机器文件的原名称$_FILES[&#39;userfile&#39;][&#39;type&#39;]        //文件 MIME 类型，如果浏览器提供此信息的话，如“image/gif”。$_FILES[&#39;userfile&#39;][&#39;size&#39;]        //已上传文件的大小，单位为字节$_FILES[&#39;userfile&#39;][&#39;tmp_name&#39;] //文件被上传后在服务端储存的临时文件名 $_FILES[&#39;userfile&#39;][&#39;error&#39;]    //和该文件上传相关的错误代码</code></pre><p>####inclde和require的区别，inclode和include_once有什么区别</p><pre><code>include的意思是包含，如果包含的文件不存在的话，那么提示一个错误，程序继续执行require的意思是需要，如果包含的文件不存在或者无法打开时，则会提示错误，程序停止执行include_once的意思是只包含一次，避免重复包含</code></pre><h4 id="用PHP写出显示客户端IP和服务器端IP"><a href="#用PHP写出显示客户端IP和服务器端IP" class="headerlink" title="用PHP写出显示客户端IP和服务器端IP"></a>用PHP写出显示客户端IP和服务器端IP</h4><pre><code>客户端：$_SERVER[&#39;REMOTE_ADDR&#39;]服务器端：$_SERVER[&#39;SERVER_ADDR&#39;]</code></pre><h4 id="echo-print-print-r-的区别"><a href="#echo-print-print-r-的区别" class="headerlink" title="echo(),print(),print_r()的区别"></a>echo(),print(),print_r()的区别</h4><pre><code>echo 是PHP语句，print和print_r是函数，语句没有返回值，函数有返回值echo 只能输出一个或者多个字符串print()只能打印简单类型变量的值(ex:int,string)print_r()可以打印出复杂类型变量的值（ex:数组，对象）</code></pre><h4 id="面向对象中接口个抽象类的区别及应用场景"><a href="#面向对象中接口个抽象类的区别及应用场景" class="headerlink" title="面向对象中接口个抽象类的区别及应用场景"></a>面向对象中接口个抽象类的区别及应用场景</h4><pre><code>有抽象方法的类叫做抽象类，抽象类中不一定有抽象方法，抽象方法必须使用abstract的关键字定义接口中全部都是抽象方法，方法不用使用abstract定义当多个同类的类要设计一个上层，通常设计为抽象类，当多个异构的类y要设计一个上层，通常设计为接口</code></pre><h4 id="描述一下http与https的区别"><a href="#描述一下http与https的区别" class="headerlink" title="描述一下http与https的区别"></a>描述一下http与https的区别</h4><pre><code>https协议需要到ca申请证书,需要缴费http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议两者使用时连接方式不同，端口也不同，http是80，https是443http连接方式很简单，无状态https协议是ssl+http协议构建的可进行加密传输、身份认证的网络协议，比http要安全</code></pre><h4 id="什么是XSS攻击，如何预防XSS攻击"><a href="#什么是XSS攻击，如何预防XSS攻击" class="headerlink" title="什么是XSS攻击，如何预防XSS攻击"></a>什么是XSS攻击，如何预防XSS攻击</h4><pre><code>XSS跨站脚本攻击，是一种常见的web安全漏洞，他允许攻击者将恶意代码植入到提供给其他用户使用的页面中。目的是为了盗取存储在客户端的cookie或者其他网站用于识别用户客户端的敏感信息。一旦获取到这些信息，攻击者就可以假冒合法用户与网站进行交互。通常分为两大类：存储行XSS和反射性XSS。坚决不要相信用户的任何输入，并过滤掉输入中的所有特殊字符。就可以防御大部分的XSS攻击目前防御XSS主要有一下几种方式：过滤掉特殊字符：避免XSS的方法之一主要是将用户所提供的内容进行过滤，Go语言提供了HTML的过滤函数使用http头指定类型&quot;w.header().set(&#39;Content-type&#39;,&#39;text/jacascript&#39;)&quot;</code></pre><h4 id="什么是CSRF攻击？如何预防CSRF攻击"><a href="#什么是CSRF攻击？如何预防CSRF攻击" class="headerlink" title="什么是CSRF攻击？如何预防CSRF攻击?"></a>什么是CSRF攻击？如何预防CSRF攻击?</h4><pre><code>跨站请求伪造，攻击者盗用登陆信息，以你的身份模拟发送各种请求。    CSRF的防御可以从服务端和客户端两方面着手，防御效果是从服务器端着手效果比较好服务器端预防CSRF攻击的方式方法有多种，主要是：１.正确的使用GET、POST和cookie２.在非GET请求中增加防伪随机数</code></pre><h4 id="常用的魔术方法和魔术变量，并说明作用"><a href="#常用的魔术方法和魔术变量，并说明作用" class="headerlink" title="常用的魔术方法和魔术变量，并说明作用"></a>常用的魔术方法和魔术变量，并说明作用</h4><pre><code>__constuct() 类的默认构造方法，如果__construct()和与类同名的方法共同出现时，默认调用__construct()而不是同类名方法__destruct()类的析构函数，当该对象的所有引用都被删除，或者对象被显示销毁时执行__get($name)可以简单归纳为：：用$object-&gt;a 的方式读取对象的属性时，如果属性 a存在且是 public型，那么直接返回该属性的值；如果属性 a不存在或者是 protected/private 这样的不可直接访问的类型，就会调用__get($name)方法并以返回值为准。一般可以使用该方法使外部可限制性地访问内部属性。__toString() 当打印对象时会被直接调用。__clone() 当对象被拷贝时直接调用。__FILE__返回文件中的当前行号__FILE__返回所在文件的完整路径。包含文件名</code></pre><h4 id="两种屏蔽PHP程序的notice警告的方法"><a href="#两种屏蔽PHP程序的notice警告的方法" class="headerlink" title="两种屏蔽PHP程序的notice警告的方法"></a>两种屏蔽PHP程序的notice警告的方法</h4><pre><code>1.在php.ini文件中改动error_reporting改为：error_reporting=E_ALL&amp;~E_NOTICE2.如果不能操作php.ini文件，可以在错误提示页面中加入如下代码：&lt;?php error_reporting(E_ALL^E_NOTICE) ?&gt;</code></pre><h4 id="utf8-general-ci不区分大小写"><a href="#utf8-general-ci不区分大小写" class="headerlink" title="utf8_general_ci不区分大小写"></a>utf8_general_ci不区分大小写</h4><h4 id="PHP访问数据库的步骤"><a href="#PHP访问数据库的步骤" class="headerlink" title="PHP访问数据库的步骤"></a>PHP访问数据库的步骤</h4><pre class=" language-mysql"><code class="language-mysql"><?php$dsn='mysql:host=localhost;dbname=test';$user='root';$password='123456';    try{        $sql='select * from  admin';        $dbh=new PDO($dsn,$user,$password);        $dbh->setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);         $stmt=$dbh->prepare($sql);        $stmt->execute();        while ($row=$stmt->fetch(PDO::FETCH_ASSOC)) {            echo $row['username'];            echo "----";        }    }catch(PDOException $e)    {        echo "连接失败";        var_dump($e->getMessage());        exit();    }?></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP基础知识总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Webpack基本介绍</title>
      <link href="/2018/11/29/2018-09-07-vue/"/>
      <url>/2018/11/29/2018-09-07-vue/</url>
      
        <content type="html"><![CDATA[<h1 id="WebpackCourse"><a href="#WebpackCourse" class="headerlink" title="WebpackCourse"></a>WebpackCourse</h1><p>This Repository will study Webpack</p><h2 id="chapter-1-Webpack介绍"><a href="#chapter-1-Webpack介绍" class="headerlink" title="chapter 1: Webpack介绍"></a>chapter 1: Webpack介绍</h2><h3 id="1-1-为什么要用Webpack"><a href="#1-1-为什么要用Webpack" class="headerlink" title="1.1 为什么要用Webpack"></a>1.1 为什么要用Webpack</h3><p>前端本可以直接HTML、CSS、Javascript就上了，不过如果要处理文件依赖、文件合并压缩、资源管理、使用新技术改善生活的时候，就得利用工具来辅助了。</p><p>以往有常见的模块化工具RequireJS，SeaJS等，构建工具Grunt、Gulp等，新的技术Sass、React、ES6、Vue等，要在项目中使用这些东西，不用工具的话就略麻烦了。</p><p><img src="/images/1530253190090.png" alt="1530253190090">|</p><p>其实简单地说要<strong>聚焦两点：模块化以及自动构建。</strong></p><p><strong>模块化可以使用RequireJS来处理依赖，使用Gulp来进行构建；也可以使用ES6新特性来处理模块化依赖，使用webpack来构建</strong></p><p>两种方式都狠不错，但潮流所驱，后者变得愈来愈强大，当然也不是说后者就替代了前者，只是大部分情况下，后者更好</p><h3 id="1-2-什么是Webpack"><a href="#1-2-什么是Webpack" class="headerlink" title="1.2 什么是Webpack"></a>1.2 什么是Webpack</h3><p>如其名，Web+Pack 即web的打包，主要用于web项目中打包资源进行自动构建。</p><p><strong>Webpack将所有资源视为JS的模块来进行构建</strong>，所以对于CSS，Image等非JS类型的文件，Webpack会使用相应的加载(loader)器来加载成其可识别的JS模块资源</p><p>通过配置一些信息，就能将资源进行打包构建，更好地实现前端的工程化</p><p><img src="/images/1530253923237.png" alt="1530253923237"></p><h2 id="chapter-2-安装"><a href="#chapter-2-安装" class="headerlink" title="chapter 2: 安装"></a>chapter 2: 安装</h2><h3 id="2-1-前提条件"><a href="#2-1-前提条件" class="headerlink" title="2.1 前提条件"></a>2.1 前提条件</h3><p>在开始之前,请确保安装了<strong>Node.js的最新版本</strong>.使用Node.js最新的长期支持版本(LTS - Long Term Support),是最理想的起步.</p><h3 id="2-2-本地安装"><a href="#2-2-本地安装" class="headerlink" title="2.2 本地安装"></a>2.2 本地安装</h3><p>要安装<strong>最新</strong>版本</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -D webpack-D 实际上是简写  --dev-savedevDependencies 开发时的依赖  webpackdependencies 永久的依赖  jquerywebpack版本与版本之间 差异是有</code></pre><p>要安装<strong>特定</strong>版本</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -D webpack@<span class="token operator">&lt;</span>version<span class="token operator">></span></code></pre><p>如果你使用Webpack 4+ 版本, 你还需要安装CLI.</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -D webpack-cli</code></pre><p><strong>对于大多数项目, 我们建议本地安装.</strong>这可以使我们在引入破坏式变更的依赖时,更容易分别升级项目.通常,Webpack通过运行一个或多个npm scripts, 会在本地 node_modules 目录中查找安装的Webpack:</p><pre class=" language-bash"><code class="language-bash"><span class="token string">"script"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"start"</span><span class="token keyword">:</span> <span class="token string">"webpack --config webpack.config.js"</span><span class="token punctuation">}</span></code></pre><blockquote><p>当你在本地安装webpack后, 你能够从 node_modules/.bin/webpack 访问它的bin版本.</p></blockquote><h3 id="2-3-全局安装"><a href="#2-3-全局安装" class="headerlink" title="2.3 全局安装"></a>2.3 全局安装</h3><p>以下的NPM安装方式, 将使webpack在全局环境下可用:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g webpack</code></pre><h3 id="2-4-配置项简介"><a href="#2-4-配置项简介" class="headerlink" title="2.4 配置项简介"></a>2.4 配置项简介</h3><ol><li><p><strong>Entry</strong></p><p><strong>入口文件配置</strong>,Webpack执行构建的第一步将从<strong>entry</strong>开始,完成整个工程的打包</p></li><li><p><strong>Module</strong></p><p>模块,在Webpack里,一切皆模块,Webpack会从配置的<strong>entry</strong>开始递归找出所有依赖的模块,最常用的是<strong>rules</strong>配置项,功能是匹配对应的后缀,从而针对代码文件完成格式转换和压缩合并等指定的操作.</p></li><li><p><strong>Loader</strong></p><p>模块转换器,用于把模块原内容按照需求转换成新内容,这个是配合Module模块中的rules中的配置项来使用.</p></li><li><p><strong>Plugins</strong></p><p>扩展插件,在Webpack构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要做的事情.(插件API)</p></li><li><p><strong>Output</strong></p><p>输出结果,在Webpack经过一系列处理并得出最终想要的代码后输出结果,配置项用于指定输出文件夹,默认是<code>./dist</code></p></li></ol><h3 id="2-5-总结"><a href="#2-5-总结" class="headerlink" title="2.5 总结"></a>2.5 总结</h3><p>安装webpack的前提条件是要安装Node.js</p><p>我们推荐本地安装webpack, 命令是: npm install -D webpack webpack-cli</p><h2 id="chapter-3-起步"><a href="#chapter-3-起步" class="headerlink" title="chapter 3: 起步"></a>chapter 3: 起步</h2><h3 id="3-1-基本安装"><a href="#3-1-基本安装" class="headerlink" title="3.1 基本安装"></a>3.1 基本安装</h3><p>首先我们创建一个目录, 初始化npm,然后在本地安装webpack,接着安装webpack-cli(此工具用于在命令行中运行webpack):</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> start <span class="token function">npm</span> init -y<span class="token function">npm</span> <span class="token function">install</span> webpack webpack-cli -D</code></pre><p>现在我们将创建以下目录结构 文件 和内容:</p><p><strong>project:</strong> </p><pre><code> handleA  |- index.html  |- /src    |- index.js    |- mixin.js</code></pre><p><strong>src/mixin.js</strong> </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">content</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'Hello, '</span> <span class="token operator">+</span> con<span class="token punctuation">;</span>  <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>src/index.js</strong> </p><pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>index.html</strong> </p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>起步<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- index.js 依赖mixin  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./src/mixin.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 只有先引入mixin 才可以让index.js正常执行 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./src/index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 以上引入方式的问题:   如果依赖不存在,或者引入顺序错误, 应用程序将无法正常运行.  如果依赖被引入但是并没有使用,浏览器将被迫下载无用代码  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="3-2-创建一个main文件"><a href="#3-2-创建一个main文件" class="headerlink" title="3.2 创建一个main文件"></a>3.2 创建一个main文件</h3><p>首先，我们稍微调整下目录结构，将“源”代码(<code>/src</code>)从我们的“分发”代码(<code>/dist</code>)中分离出来。“源”代码是用于书写和编辑的代码。“分发”代码是构建过程产生的代码最小化和优化后的“输出”目录，最终将在浏览器中加载： </p><p><strong>project</strong> </p><pre><code>  handleB  |- package.json  |- .npmrc  |- /dist    |- index.html  |- /src    |- index.js    |- mixin.js</code></pre><p>刚才我们通过两次script标签 引入 并确定了两个js文件的先后顺序.下面我们通过import 或者 require 方式引入mixin.js</p><p><strong>src/index.js</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// var content = require('./mixin');</span><span class="token keyword">import</span>  content  <span class="token keyword">from</span> <span class="token string">"./mixin"</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>src/mixin.js</strong></p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>con<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'Hello, '</span> <span class="token operator">+</span> con<span class="token punctuation">;</span>  <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>.npmrc</strong></p><pre class=" language-shell"><code class="language-shell">registry=https://registry.npm.taobao.org</code></pre><h3 id="3-3-使用一个配置文件"><a href="#3-3-使用一个配置文件" class="headerlink" title="3.3 使用一个配置文件"></a>3.3 使用一个配置文件</h3><p>在webpack 4 中,可以无须任何配置使用, 然而大多数项目会需要很复杂的设置, 这就是为什么 webpack 仍然需要支持 配置文件.  这比在终端(terminal)中手动输入大量命令要高效的多.接下来我们看看配置文件怎么写?</p><p><strong>project</strong> </p><pre><code>  handleC  |- package.json  |- webpack.config.js  |- /dist    |- index.html  |- /src    |- index.js    |- mixin.js</code></pre><p><strong>webpack.config.js</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 打包的入口点</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 打包的输出点</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 打包之后输出文件的名称</span>    filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 打包之后输出文件的路径</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>src/index.js</strong></p><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">var</span> content <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./mixin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>src/mixin.js</strong></p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>con<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'Hello, '</span> <span class="token operator">+</span> con<span class="token punctuation">;</span>  <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-总结"><a href="#3-4-总结" class="headerlink" title="3.4 总结"></a>3.4 总结</h3><p>webpack 的基本使用方式 </p><ol><li>创建webpack.config.js</li><li>指定项目打包的入口</li><li>指定项目打包后文件的名称和输出路径</li></ol><h2 id="chapter-4-配置代码错误源"><a href="#chapter-4-配置代码错误源" class="headerlink" title="chapter 4: 配置代码错误源"></a>chapter 4: 配置代码错误源</h2><p><img src="/images/1530470953644.png" alt="1530470923756"></p><p><strong>webpack.config.js</strong></p><pre class=" language-js"><code class="language-js">devtool<span class="token punctuation">:</span> <span class="token string">'inline-source-map'</span></code></pre><p><img src="/images/1530471203270.png" alt="1530471203270">|</p><h2 id="chapter-5-加载CSS"><a href="#chapter-5-加载CSS" class="headerlink" title="chapter 5: 加载CSS"></a>chapter 5: 加载CSS</h2><h3 id="5-1-下载包"><a href="#5-1-下载包" class="headerlink" title="5.1 下载包"></a>5.1 下载包</h3><pre><code>npm install -D style-loader css-loader</code></pre><h3 id="5-2-引入资源"><a href="#5-2-引入资源" class="headerlink" title="5.2  引入资源"></a>5.2  引入资源</h3><p><strong>src/js/index.js</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 引入css</span><span class="token keyword">import</span> <span class="token string">'../css/main.css'</span></code></pre><h3 id="5-3-配置webpack-config-js"><a href="#5-3-配置webpack-config-js" class="headerlink" title="5.3 配置webpack.config.js"></a>5.3 配置webpack.config.js</h3><pre class=" language-javascript"><code class="language-javascript"> module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">// 处理css</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span></code></pre><h2 id="chapter-6-加载图片"><a href="#chapter-6-加载图片" class="headerlink" title="chapter 6: 加载图片"></a>chapter 6: 加载图片</h2><h3 id="6-1-下载包"><a href="#6-1-下载包" class="headerlink" title="6.1 下载包"></a>6.1 下载包</h3><pre class=" language-shell"><code class="language-shell">npm install -D file-loader</code></pre><h3 id="6-2-引入资源"><a href="#6-2-引入资源" class="headerlink" title="6.2 引入资源"></a>6.2 引入资源</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> imgSrc <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../image/chrome.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="6-3-配置webpack-config-js"><a href="#6-3-配置webpack-config-js" class="headerlink" title="6.3 配置webpack.config.js"></a>6.3 配置webpack.config.js</h3><pre class=" language-javascript"><code class="language-javascript">  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpe?g|gif|svg)$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'file-loader'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span></code></pre><h2 id="chapter-7-加载字体"><a href="#chapter-7-加载字体" class="headerlink" title="chapter 7: 加载字体"></a>chapter 7: 加载字体</h2><h3 id="7-1-下载字体"><a href="#7-1-下载字体" class="headerlink" title="7.1 下载字体"></a>7.1 下载字体</h3><p><img src="/images/1530471828957.png" alt="1530471828957">|</p><h3 id="7-2-定义字体"><a href="#7-2-定义字体" class="headerlink" title="7.2 定义字体"></a>7.2 定义字体</h3><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'wanlum'</span><span class="token punctuation">;</span>  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url("../fonts/Raleway.ttf")</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="7-3-使用字体"><a href="#7-3-使用字体" class="headerlink" title="7.3 使用字体"></a>7.3 使用字体</h3><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'wanlum'</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="7-4-配置webpack-config-js"><a href="#7-4-配置webpack-config-js" class="headerlink" title="7.4 配置webpack.config.js"></a>7.4 配置webpack.config.js</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(woff|woff2|eot|ttf|otf)$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token string">'file-loader'</span>        <span class="token punctuation">]</span>  <span class="token punctuation">}</span></code></pre><h2 id="chapter-8-编译ES6"><a href="#chapter-8-编译ES6" class="headerlink" title="chapter 8: 编译ES6"></a>chapter 8: 编译ES6</h2><h3 id="8-1-下载包"><a href="#8-1-下载包" class="headerlink" title="8.1 下载包"></a>8.1 下载包</h3><pre><code>npm install -D babel-cli babel-preset-env babel-loader</code></pre><h3 id="8-2-编辑配置文件-babelrc"><a href="#8-2-编辑配置文件-babelrc" class="headerlink" title="8.2 编辑配置文件 .babelrc"></a>8.2 编辑配置文件 .babelrc</h3><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"env"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="8-3-配置webpack-config-js"><a href="#8-3-配置webpack-config-js" class="headerlink" title="8.3 配置webpack.config.js"></a>8.3 配置webpack.config.js</h3><pre class=" language-javascript"><code class="language-javascript"> <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">{</span>          loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="chapter-9-less编译成css"><a href="#chapter-9-less编译成css" class="headerlink" title="chapter 9: less编译成css"></a>chapter 9: less编译成css</h2><h3 id="9-1-下载包"><a href="#9-1-下载包" class="headerlink" title="9.1 下载包"></a>9.1 下载包</h3><pre><code>npm install less-loader less -D</code></pre><h3 id="9-2-配置包"><a href="#9-2-配置包" class="headerlink" title="9.2 配置包"></a>9.2 配置包</h3><pre class=" language-javascript"><code class="language-javascript">   <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h2 id="chapter-10-html自动生成"><a href="#chapter-10-html自动生成" class="headerlink" title="chapter 10: html自动生成"></a>chapter 10: html自动生成</h2><h3 id="10-1-下载包"><a href="#10-1-下载包" class="headerlink" title="10.1 下载包"></a>10.1 下载包</h3><pre><code>npm install -D html-webpack-plugin</code></pre><h3 id="10-2-引入包"><a href="#10-2-引入包" class="headerlink" title="10.2 引入包"></a>10.2 引入包</h3><pre><code>const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);</code></pre><h3 id="10-3-配置包"><a href="#10-3-配置包" class="headerlink" title="10.3 配置包"></a>10.3 配置包</h3><pre><code> plugins: [    new HtmlWebpackPlugin({      title: &#39;使用HtmlWebpackPlugin&#39;    })  ]</code></pre><h2 id="chapter-11-清理dist目录"><a href="#chapter-11-清理dist目录" class="headerlink" title="chapter 11: 清理dist目录"></a>chapter 11: 清理dist目录</h2><h3 id="11-1-下载包"><a href="#11-1-下载包" class="headerlink" title="11.1 下载包"></a>11.1 下载包</h3><pre><code>npm install -D clean-webpack-plugin</code></pre><h3 id="11-2-引入包"><a href="#11-2-引入包" class="headerlink" title="11.2 引入包"></a>11.2 引入包</h3><pre><code>const CleanWebpackPlugin = require(&#39;clean-webpack-plugin&#39;);</code></pre><h3 id="11-3-配置包"><a href="#11-3-配置包" class="headerlink" title="11.3 配置包"></a>11.3 配置包</h3><pre><code>   new CleanWebpackPlugin([&#39;dist&#39;])</code></pre><h2 id="chapter-12-自动编译实时加载"><a href="#chapter-12-自动编译实时加载" class="headerlink" title="chapter 12: 自动编译实时加载"></a>chapter 12: 自动编译实时加载</h2><h3 id="12-1-下载包"><a href="#12-1-下载包" class="headerlink" title="12.1 下载包"></a>12.1 下载包</h3><pre class=" language-shell"><code class="language-shell">npm install -D webpack-dev-server</code></pre><h3 id="12-2-配置包"><a href="#12-2-配置包" class="headerlink" title="12.2 配置包"></a>12.2 配置包</h3><pre class=" language-js"><code class="language-js">devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    contentBase<span class="token punctuation">:</span> <span class="token string">'./dist'</span><span class="token punctuation">}</span></code></pre><h3 id="12-3-配置启动项"><a href="#12-3-配置启动项" class="headerlink" title="12.3 配置启动项"></a>12.3 配置启动项</h3><pre class=" language-shell"><code class="language-shell">"start": "webpack-dev-server --config webpack.config.js"</code></pre><h2 id="chapter-13-热替换"><a href="#chapter-13-热替换" class="headerlink" title="chapter 13: 热替换"></a>chapter 13: 热替换</h2><h3 id="13-1-配置"><a href="#13-1-配置" class="headerlink" title="13.1 配置"></a>13.1 配置</h3><pre class=" language-javascript"><code class="language-javascript">  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'使用HtmlWebpackPlugin'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'dist'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NamedModulesPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>   devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>     contentBase<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     hot<span class="token punctuation">:</span> <span class="token boolean">true</span>   <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack入门到放弃 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
