<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>PHP基础知识总结</title>
      <link href="/2018/12/17/php/"/>
      <url>/2018/12/17/php/</url>
      
        <content type="html"><![CDATA[<h4 id="PHP的意思，它能干些什么"><a href="#PHP的意思，它能干些什么" class="headerlink" title="PHP的意思，它能干些什么"></a>PHP的意思，它能干些什么</h4><pre><code>PHP（超文本预处理）是一种被广泛应用开放源代码的多用途脚本语言，可嵌入HTML中，尤其适合Web开发PHP能做很多事，主要用于服务端的脚本程序，因此可以用来完成其它CGI程序能够完成的工作ex：收集表单数据，生成动态网页</code></pre><h4 id="说明PHP中传值和传引用的区别，说明什么时候传值，什么时候用引用。"><a href="#说明PHP中传值和传引用的区别，说明什么时候传值，什么时候用引用。" class="headerlink" title="说明PHP中传值和传引用的区别，说明什么时候传值，什么时候用引用。"></a>说明PHP中传值和传引用的区别，说明什么时候传值，什么时候用引用。</h4><pre><code>传值：就是将变量的值拷贝一份赋值给另一个变量，改变任何一个变量的值都不会影响到另一个传引用：将变量的值的内存地址传给另一个变量，新变量引用了原始变量，两个变量同时指向了同一个值，改动会相互影响对于比较大的数据，传引用比较好，可以节省内存开销</code></pre><h4 id="PHP在服务器端进行页面重定向所使用的函数名称"><a href="#PHP在服务器端进行页面重定向所使用的函数名称" class="headerlink" title="PHP在服务器端进行页面重定向所使用的函数名称"></a>PHP在服务器端进行页面重定向所使用的函数名称</h4><pre><code>header()ex:header(&quot;Localhost:http://www.example.com/&quot;);header(&quot;HTTP/1.0 404 NOT Found&quot;);</code></pre><h4 id="什么是面向对象，主要特征是什么？"><a href="#什么是面向对象，主要特征是什么？" class="headerlink" title="什么是面向对象，主要特征是什么？"></a>什么是面向对象，主要特征是什么？</h4><pre><code>面向对象简称OOP，对象就是人对各种具体事物抽象之后的概念。人们每天都在跟各种对象打交道，就比如：一台电脑；而对象有很多特性：内存，宽度，颜色...这些就是属性，而对象还有很多功能：听歌，看视频，打电话...这些就是方法，可以看成是一个函数但是对象不是独立的，还有继承性。在编程的过程中，我们可以把所有问题都看成是一个对象，但对象实际上就是一组数据的集合，并且都已经被命名，这些数据的根据就是对象的属性，可以被访问。但是如果要访问一个外部的对象我们就必须要先将它引进来。把数据及对数据的操作方法放在一起，作为一个相互依存的整体---对象。对同类对象抽象出其共性，形成类。类中的大多数数据，只能用本类中的方法进行处理。类通过一个简单的接口和外界发生关系，对象与对象之间通过消息进行通信。是一种设计方式，两个成员，一个属性，一个方法，有利于提高程序的重用性，使程序结构更加清晰特征：封装，继承，多态</code></pre><h4 id="SESSION和COOKIE的区别是什么，请从协议，产生的原因与作用声明"><a href="#SESSION和COOKIE的区别是什么，请从协议，产生的原因与作用声明" class="headerlink" title="SESSION和COOKIE的区别是什么，请从协议，产生的原因与作用声明"></a>SESSION和COOKIE的区别是什么，请从协议，产生的原因与作用声明</h4><pre><code>http无状态协议，不能区分用户是否是从同一个网站上来的，同一个用户请求不同的页面不能看作是同一个用户。cookie数据存放在客户的浏览器上，session数据放在服务器上。cookie安全性没有session高，别人可以分析本地的cookie进行cookie欺诈，考虑到安全应当使用session。session依赖于cookie进行传递，禁用cookie后。session不能正常使用。session会在一定时间内保存在服务器上，每次读取都要从服务器读取，如果访问量多的话，对服务器有资源消耗，考虑服务器性能，应当使用cookie将登陆信息等重要信息存放为SESSION其他信息如果需要保留，可以放在COOKIE中</code></pre><h4 id="get和post的区别"><a href="#get和post的区别" class="headerlink" title="get和post的区别"></a>get和post的区别</h4><pre><code></code></pre><h4 id="简述cookie的设置及获取过程"><a href="#简述cookie的设置及获取过程" class="headerlink" title="简述cookie的设置及获取过程"></a>简述cookie的设置及获取过程</h4><pre><code>设置COOKIE的值：setcookie(名称,值,保存时间,有效域)获取值：$_COOKIE[&#39;名称&#39;];</code></pre><h4 id="几个预定义全局变量的作用？"><a href="#几个预定义全局变量的作用？" class="headerlink" title="几个预定义全局变量的作用？"></a>几个预定义全局变量的作用？</h4><pre><code>$_SERVER[&#39;DOCUMENT_ROOT&#39;]        //当前运行脚本所在的文档根目录$_SERVER[&#39;HTTP_HOST &#39;]            //当前请求的 Host: 头部的内容$_SERVER[&#39;REMOTE_ADDR&#39;]            //正在浏览当前页面用户的 IP 地址$_SERVER[&#39;HTTP_REFERER&#39;]         //链接到当前页面的前一页面的 URL 地址$_SERVER[&#39;SERVER_NAME&#39;]            //当前运行脚本所在服务器主机的名称$_FILES                           //包含有所有上传的文件信息S_FILES[&#39;userfile&#39;][&#39;name&#39;]        //客户端机器文件的原名称$_FILES[&#39;userfile&#39;][&#39;type&#39;]        //文件 MIME 类型，如果浏览器提供此信息的话，如“image/gif”。$_FILES[&#39;userfile&#39;][&#39;size&#39;]        //已上传文件的大小，单位为字节$_FILES[&#39;userfile&#39;][&#39;tmp_name&#39;] //文件被上传后在服务端储存的临时文件名 $_FILES[&#39;userfile&#39;][&#39;error&#39;]    //和该文件上传相关的错误代码</code></pre><p>####inclde和require的区别，inclode和include_once有什么区别</p><pre><code>include的意思是包含，如果包含的文件不存在的话，那么提示一个错误，程序继续执行require的意思是需要，如果包含的文件不存在或者无法打开时，则会提示错误，程序停止执行include_once的意思是只包含一次，避免重复包含</code></pre><h4 id="用PHP写出显示客户端IP和服务器端IP"><a href="#用PHP写出显示客户端IP和服务器端IP" class="headerlink" title="用PHP写出显示客户端IP和服务器端IP"></a>用PHP写出显示客户端IP和服务器端IP</h4><pre><code>客户端：$_SERVER[&#39;REMOTE_ADDR&#39;]服务器端：$_SERVER[&#39;SERVER_ADDR&#39;]</code></pre><h4 id="echo-print-print-r-的区别"><a href="#echo-print-print-r-的区别" class="headerlink" title="echo(),print(),print_r()的区别"></a>echo(),print(),print_r()的区别</h4><pre><code>echo 是PHP语句，print和print_r是函数，语句没有返回值，函数有返回值echo 只能输出一个或者多个字符串print()只能打印简单类型变量的值(ex:int,string)print_r()可以打印出复杂类型变量的值（ex:数组，对象）</code></pre><h4 id="面向对象中接口个抽象类的区别及应用场景"><a href="#面向对象中接口个抽象类的区别及应用场景" class="headerlink" title="面向对象中接口个抽象类的区别及应用场景"></a>面向对象中接口个抽象类的区别及应用场景</h4><pre><code>有抽象方法的类叫做抽象类，抽象类中不一定有抽象方法，抽象方法必须使用abstract的关键字定义接口中全部都是抽象方法，方法不用使用abstract定义当多个同类的类要设计一个上层，通常设计为抽象类，当多个异构的类y要设计一个上层，通常设计为接口</code></pre><h4 id="描述一下http与https的区别"><a href="#描述一下http与https的区别" class="headerlink" title="描述一下http与https的区别"></a>描述一下http与https的区别</h4><pre><code>https协议需要到ca申请证书,需要缴费http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议两者使用时连接方式不同，端口也不同，http是80，https是443http连接方式很简单，无状态https协议是ssl+http协议构建的可进行加密传输、身份认证的网络协议，比http要安全</code></pre><h4 id="什么是XSS攻击，如何预防XSS攻击"><a href="#什么是XSS攻击，如何预防XSS攻击" class="headerlink" title="什么是XSS攻击，如何预防XSS攻击"></a>什么是XSS攻击，如何预防XSS攻击</h4><pre><code>XSS跨站脚本攻击，是一种常见的web安全漏洞，他允许攻击者将恶意代码植入到提供给其他用户使用的页面中。目的是为了盗取存储在客户端的cookie或者其他网站用于识别用户客户端的敏感信息。一旦获取到这些信息，攻击者就可以假冒合法用户与网站进行交互。通常分为两大类：存储行XSS和反射性XSS。坚决不要相信用户的任何输入，并过滤掉输入中的所有特殊字符。就可以防御大部分的XSS攻击目前防御XSS主要有一下几种方式：过滤掉特殊字符：避免XSS的方法之一主要是将用户所提供的内容进行过滤，Go语言提供了HTML的过滤函数使用http头指定类型&quot;w.header().set(&#39;Content-type&#39;,&#39;text/jacascript&#39;)&quot;</code></pre><h4 id="什么是CSRF攻击？如何预防CSRF攻击"><a href="#什么是CSRF攻击？如何预防CSRF攻击" class="headerlink" title="什么是CSRF攻击？如何预防CSRF攻击?"></a>什么是CSRF攻击？如何预防CSRF攻击?</h4><pre><code>跨站请求伪造，攻击者盗用登陆信息，以你的身份模拟发送各种请求。    CSRF的防御可以从服务端和客户端两方面着手，防御效果是从服务器端着手效果比较好服务器端预防CSRF攻击的方式方法有多种，主要是：１.正确的使用GET、POST和cookie２.在非GET请求中增加防伪随机数</code></pre><h4 id="常用的魔术方法和魔术变量，并说明作用"><a href="#常用的魔术方法和魔术变量，并说明作用" class="headerlink" title="常用的魔术方法和魔术变量，并说明作用"></a>常用的魔术方法和魔术变量，并说明作用</h4><pre><code>__constuct() 类的默认构造方法，如果__construct()和与类同名的方法共同出现时，默认调用__construct()而不是同类名方法__destruct()类的析构函数，当该对象的所有引用都被删除，或者对象被显示销毁时执行__get($name)可以简单归纳为：：用$object-&gt;a 的方式读取对象的属性时，如果属性 a存在且是 public型，那么直接返回该属性的值；如果属性 a不存在或者是 protected/private 这样的不可直接访问的类型，就会调用__get($name)方法并以返回值为准。一般可以使用该方法使外部可限制性地访问内部属性。__toString() 当打印对象时会被直接调用。__clone() 当对象被拷贝时直接调用。__FILE__返回文件中的当前行号__FILE__返回所在文件的完整路径。包含文件名</code></pre><h4 id="两种屏蔽PHP程序的notice警告的方法"><a href="#两种屏蔽PHP程序的notice警告的方法" class="headerlink" title="两种屏蔽PHP程序的notice警告的方法"></a>两种屏蔽PHP程序的notice警告的方法</h4><pre><code>1.在php.ini文件中改动error_reporting改为：error_reporting=E_ALL&amp;~E_NOTICE2.如果不能操作php.ini文件，可以在错误提示页面中加入如下代码：&lt;?php error_reporting(E_ALL^E_NOTICE) ?&gt;</code></pre><h4 id="utf8-general-ci不区分大小写"><a href="#utf8-general-ci不区分大小写" class="headerlink" title="utf8_general_ci不区分大小写"></a>utf8_general_ci不区分大小写</h4><h4 id="PHP访问数据库的步骤"><a href="#PHP访问数据库的步骤" class="headerlink" title="PHP访问数据库的步骤"></a>PHP访问数据库的步骤</h4><pre class=" language-mysql"><code class="language-mysql"><?php$dsn='mysql:host=localhost;dbname=test';$user='root';$password='123456';    try{        $sql='select * from  admin';        $dbh=new PDO($dsn,$user,$password);        $dbh->setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);         $stmt=$dbh->prepare($sql);        $stmt->execute();        while ($row=$stmt->fetch(PDO::FETCH_ASSOC)) {            echo $row['username'];            echo "----";        }    }catch(PDOException $e)    {        echo "连接失败";        var_dump($e->getMessage());        exit();    }?></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP基础知识总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Webpack基本介绍</title>
      <link href="/2018/11/29/2018-09-07-vue/"/>
      <url>/2018/11/29/2018-09-07-vue/</url>
      
        <content type="html"><![CDATA[<h1 id="WebpackCourse"><a href="#WebpackCourse" class="headerlink" title="WebpackCourse"></a>WebpackCourse</h1><p>This Repository will study Webpack</p><h2 id="chapter-1-Webpack介绍"><a href="#chapter-1-Webpack介绍" class="headerlink" title="chapter 1: Webpack介绍"></a>chapter 1: Webpack介绍</h2><h3 id="1-1-为什么要用Webpack"><a href="#1-1-为什么要用Webpack" class="headerlink" title="1.1 为什么要用Webpack"></a>1.1 为什么要用Webpack</h3><p>前端本可以直接HTML、CSS、Javascript就上了，不过如果要处理文件依赖、文件合并压缩、资源管理、使用新技术改善生活的时候，就得利用工具来辅助了。</p><p>以往有常见的模块化工具RequireJS，SeaJS等，构建工具Grunt、Gulp等，新的技术Sass、React、ES6、Vue等，要在项目中使用这些东西，不用工具的话就略麻烦了。</p><p><img src="/images/1530253190090.png" alt="1530253190090">|</p><p>其实简单地说要<strong>聚焦两点：模块化以及自动构建。</strong></p><p><strong>模块化可以使用RequireJS来处理依赖，使用Gulp来进行构建；也可以使用ES6新特性来处理模块化依赖，使用webpack来构建</strong></p><p>两种方式都狠不错，但潮流所驱，后者变得愈来愈强大，当然也不是说后者就替代了前者，只是大部分情况下，后者更好</p><h3 id="1-2-什么是Webpack"><a href="#1-2-什么是Webpack" class="headerlink" title="1.2 什么是Webpack"></a>1.2 什么是Webpack</h3><p>如其名，Web+Pack 即web的打包，主要用于web项目中打包资源进行自动构建。</p><p><strong>Webpack将所有资源视为JS的模块来进行构建</strong>，所以对于CSS，Image等非JS类型的文件，Webpack会使用相应的加载(loader)器来加载成其可识别的JS模块资源</p><p>通过配置一些信息，就能将资源进行打包构建，更好地实现前端的工程化</p><p><img src="/images/1530253923237.png" alt="1530253923237"></p><h2 id="chapter-2-安装"><a href="#chapter-2-安装" class="headerlink" title="chapter 2: 安装"></a>chapter 2: 安装</h2><h3 id="2-1-前提条件"><a href="#2-1-前提条件" class="headerlink" title="2.1 前提条件"></a>2.1 前提条件</h3><p>在开始之前,请确保安装了<strong>Node.js的最新版本</strong>.使用Node.js最新的长期支持版本(LTS - Long Term Support),是最理想的起步.</p><h3 id="2-2-本地安装"><a href="#2-2-本地安装" class="headerlink" title="2.2 本地安装"></a>2.2 本地安装</h3><p>要安装<strong>最新</strong>版本</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -D webpack-D 实际上是简写  --dev-savedevDependencies 开发时的依赖  webpackdependencies 永久的依赖  jquerywebpack版本与版本之间 差异是有</code></pre><p>要安装<strong>特定</strong>版本</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -D webpack@<span class="token operator">&lt;</span>version<span class="token operator">></span></code></pre><p>如果你使用Webpack 4+ 版本, 你还需要安装CLI.</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -D webpack-cli</code></pre><p><strong>对于大多数项目, 我们建议本地安装.</strong>这可以使我们在引入破坏式变更的依赖时,更容易分别升级项目.通常,Webpack通过运行一个或多个npm scripts, 会在本地 node_modules 目录中查找安装的Webpack:</p><pre class=" language-bash"><code class="language-bash"><span class="token string">"script"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"start"</span><span class="token keyword">:</span> <span class="token string">"webpack --config webpack.config.js"</span><span class="token punctuation">}</span></code></pre><blockquote><p>当你在本地安装webpack后, 你能够从 node_modules/.bin/webpack 访问它的bin版本.</p></blockquote><h3 id="2-3-全局安装"><a href="#2-3-全局安装" class="headerlink" title="2.3 全局安装"></a>2.3 全局安装</h3><p>以下的NPM安装方式, 将使webpack在全局环境下可用:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g webpack</code></pre><h3 id="2-4-配置项简介"><a href="#2-4-配置项简介" class="headerlink" title="2.4 配置项简介"></a>2.4 配置项简介</h3><ol><li><p><strong>Entry</strong></p><p><strong>入口文件配置</strong>,Webpack执行构建的第一步将从<strong>entry</strong>开始,完成整个工程的打包</p></li><li><p><strong>Module</strong></p><p>模块,在Webpack里,一切皆模块,Webpack会从配置的<strong>entry</strong>开始递归找出所有依赖的模块,最常用的是<strong>rules</strong>配置项,功能是匹配对应的后缀,从而针对代码文件完成格式转换和压缩合并等指定的操作.</p></li><li><p><strong>Loader</strong></p><p>模块转换器,用于把模块原内容按照需求转换成新内容,这个是配合Module模块中的rules中的配置项来使用.</p></li><li><p><strong>Plugins</strong></p><p>扩展插件,在Webpack构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要做的事情.(插件API)</p></li><li><p><strong>Output</strong></p><p>输出结果,在Webpack经过一系列处理并得出最终想要的代码后输出结果,配置项用于指定输出文件夹,默认是<code>./dist</code></p></li></ol><h3 id="2-5-总结"><a href="#2-5-总结" class="headerlink" title="2.5 总结"></a>2.5 总结</h3><p>安装webpack的前提条件是要安装Node.js</p><p>我们推荐本地安装webpack, 命令是: npm install -D webpack webpack-cli</p><h2 id="chapter-3-起步"><a href="#chapter-3-起步" class="headerlink" title="chapter 3: 起步"></a>chapter 3: 起步</h2><h3 id="3-1-基本安装"><a href="#3-1-基本安装" class="headerlink" title="3.1 基本安装"></a>3.1 基本安装</h3><p>首先我们创建一个目录, 初始化npm,然后在本地安装webpack,接着安装webpack-cli(此工具用于在命令行中运行webpack):</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> start <span class="token function">npm</span> init -y<span class="token function">npm</span> <span class="token function">install</span> webpack webpack-cli -D</code></pre><p>现在我们将创建以下目录结构 文件 和内容:</p><p><strong>project:</strong> </p><pre><code> handleA  |- index.html  |- /src    |- index.js    |- mixin.js</code></pre><p><strong>src/mixin.js</strong> </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">content</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'Hello, '</span> <span class="token operator">+</span> con<span class="token punctuation">;</span>  <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>src/index.js</strong> </p><pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>index.html</strong> </p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>起步<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- index.js 依赖mixin  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./src/mixin.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 只有先引入mixin 才可以让index.js正常执行 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./src/index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 以上引入方式的问题:   如果依赖不存在,或者引入顺序错误, 应用程序将无法正常运行.  如果依赖被引入但是并没有使用,浏览器将被迫下载无用代码  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="3-2-创建一个main文件"><a href="#3-2-创建一个main文件" class="headerlink" title="3.2 创建一个main文件"></a>3.2 创建一个main文件</h3><p>首先，我们稍微调整下目录结构，将“源”代码(<code>/src</code>)从我们的“分发”代码(<code>/dist</code>)中分离出来。“源”代码是用于书写和编辑的代码。“分发”代码是构建过程产生的代码最小化和优化后的“输出”目录，最终将在浏览器中加载： </p><p><strong>project</strong> </p><pre><code>  handleB  |- package.json  |- .npmrc  |- /dist    |- index.html  |- /src    |- index.js    |- mixin.js</code></pre><p>刚才我们通过两次script标签 引入 并确定了两个js文件的先后顺序.下面我们通过import 或者 require 方式引入mixin.js</p><p><strong>src/index.js</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// var content = require('./mixin');</span><span class="token keyword">import</span>  content  <span class="token keyword">from</span> <span class="token string">"./mixin"</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>src/mixin.js</strong></p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>con<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'Hello, '</span> <span class="token operator">+</span> con<span class="token punctuation">;</span>  <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>.npmrc</strong></p><pre class=" language-shell"><code class="language-shell">registry=https://registry.npm.taobao.org</code></pre><h3 id="3-3-使用一个配置文件"><a href="#3-3-使用一个配置文件" class="headerlink" title="3.3 使用一个配置文件"></a>3.3 使用一个配置文件</h3><p>在webpack 4 中,可以无须任何配置使用, 然而大多数项目会需要很复杂的设置, 这就是为什么 webpack 仍然需要支持 配置文件.  这比在终端(terminal)中手动输入大量命令要高效的多.接下来我们看看配置文件怎么写?</p><p><strong>project</strong> </p><pre><code>  handleC  |- package.json  |- webpack.config.js  |- /dist    |- index.html  |- /src    |- index.js    |- mixin.js</code></pre><p><strong>webpack.config.js</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 打包的入口点</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 打包的输出点</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 打包之后输出文件的名称</span>    filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 打包之后输出文件的路径</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>src/index.js</strong></p><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">var</span> content <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./mixin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>src/mixin.js</strong></p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>con<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'Hello, '</span> <span class="token operator">+</span> con<span class="token punctuation">;</span>  <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-总结"><a href="#3-4-总结" class="headerlink" title="3.4 总结"></a>3.4 总结</h3><p>webpack 的基本使用方式 </p><ol><li>创建webpack.config.js</li><li>指定项目打包的入口</li><li>指定项目打包后文件的名称和输出路径</li></ol><h2 id="chapter-4-配置代码错误源"><a href="#chapter-4-配置代码错误源" class="headerlink" title="chapter 4: 配置代码错误源"></a>chapter 4: 配置代码错误源</h2><p><img src="/images/1530470953644.png" alt="1530470923756"></p><p><strong>webpack.config.js</strong></p><pre class=" language-js"><code class="language-js">devtool<span class="token punctuation">:</span> <span class="token string">'inline-source-map'</span></code></pre><p><img src="/images/1530471203270.png" alt="1530471203270">|</p><h2 id="chapter-5-加载CSS"><a href="#chapter-5-加载CSS" class="headerlink" title="chapter 5: 加载CSS"></a>chapter 5: 加载CSS</h2><h3 id="5-1-下载包"><a href="#5-1-下载包" class="headerlink" title="5.1 下载包"></a>5.1 下载包</h3><pre><code>npm install -D style-loader css-loader</code></pre><h3 id="5-2-引入资源"><a href="#5-2-引入资源" class="headerlink" title="5.2  引入资源"></a>5.2  引入资源</h3><p><strong>src/js/index.js</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 引入css</span><span class="token keyword">import</span> <span class="token string">'../css/main.css'</span></code></pre><h3 id="5-3-配置webpack-config-js"><a href="#5-3-配置webpack-config-js" class="headerlink" title="5.3 配置webpack.config.js"></a>5.3 配置webpack.config.js</h3><pre class=" language-javascript"><code class="language-javascript"> module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">// 处理css</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span></code></pre><h2 id="chapter-6-加载图片"><a href="#chapter-6-加载图片" class="headerlink" title="chapter 6: 加载图片"></a>chapter 6: 加载图片</h2><h3 id="6-1-下载包"><a href="#6-1-下载包" class="headerlink" title="6.1 下载包"></a>6.1 下载包</h3><pre class=" language-shell"><code class="language-shell">npm install -D file-loader</code></pre><h3 id="6-2-引入资源"><a href="#6-2-引入资源" class="headerlink" title="6.2 引入资源"></a>6.2 引入资源</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> imgSrc <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../image/chrome.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="6-3-配置webpack-config-js"><a href="#6-3-配置webpack-config-js" class="headerlink" title="6.3 配置webpack.config.js"></a>6.3 配置webpack.config.js</h3><pre class=" language-javascript"><code class="language-javascript">  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpe?g|gif|svg)$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'file-loader'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span></code></pre><h2 id="chapter-7-加载字体"><a href="#chapter-7-加载字体" class="headerlink" title="chapter 7: 加载字体"></a>chapter 7: 加载字体</h2><h3 id="7-1-下载字体"><a href="#7-1-下载字体" class="headerlink" title="7.1 下载字体"></a>7.1 下载字体</h3><p><img src="/images/1530471828957.png" alt="1530471828957">|</p><h3 id="7-2-定义字体"><a href="#7-2-定义字体" class="headerlink" title="7.2 定义字体"></a>7.2 定义字体</h3><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'wanlum'</span><span class="token punctuation">;</span>  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url("../fonts/Raleway.ttf")</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="7-3-使用字体"><a href="#7-3-使用字体" class="headerlink" title="7.3 使用字体"></a>7.3 使用字体</h3><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'wanlum'</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="7-4-配置webpack-config-js"><a href="#7-4-配置webpack-config-js" class="headerlink" title="7.4 配置webpack.config.js"></a>7.4 配置webpack.config.js</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(woff|woff2|eot|ttf|otf)$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token string">'file-loader'</span>        <span class="token punctuation">]</span>  <span class="token punctuation">}</span></code></pre><h2 id="chapter-8-编译ES6"><a href="#chapter-8-编译ES6" class="headerlink" title="chapter 8: 编译ES6"></a>chapter 8: 编译ES6</h2><h3 id="8-1-下载包"><a href="#8-1-下载包" class="headerlink" title="8.1 下载包"></a>8.1 下载包</h3><pre><code>npm install -D babel-cli babel-preset-env babel-loader</code></pre><h3 id="8-2-编辑配置文件-babelrc"><a href="#8-2-编辑配置文件-babelrc" class="headerlink" title="8.2 编辑配置文件 .babelrc"></a>8.2 编辑配置文件 .babelrc</h3><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"env"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="8-3-配置webpack-config-js"><a href="#8-3-配置webpack-config-js" class="headerlink" title="8.3 配置webpack.config.js"></a>8.3 配置webpack.config.js</h3><pre class=" language-javascript"><code class="language-javascript"> <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">{</span>          loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="chapter-9-less编译成css"><a href="#chapter-9-less编译成css" class="headerlink" title="chapter 9: less编译成css"></a>chapter 9: less编译成css</h2><h3 id="9-1-下载包"><a href="#9-1-下载包" class="headerlink" title="9.1 下载包"></a>9.1 下载包</h3><pre><code>npm install less-loader less -D</code></pre><h3 id="9-2-配置包"><a href="#9-2-配置包" class="headerlink" title="9.2 配置包"></a>9.2 配置包</h3><pre class=" language-javascript"><code class="language-javascript">   <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h2 id="chapter-10-html自动生成"><a href="#chapter-10-html自动生成" class="headerlink" title="chapter 10: html自动生成"></a>chapter 10: html自动生成</h2><h3 id="10-1-下载包"><a href="#10-1-下载包" class="headerlink" title="10.1 下载包"></a>10.1 下载包</h3><pre><code>npm install -D html-webpack-plugin</code></pre><h3 id="10-2-引入包"><a href="#10-2-引入包" class="headerlink" title="10.2 引入包"></a>10.2 引入包</h3><pre><code>const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);</code></pre><h3 id="10-3-配置包"><a href="#10-3-配置包" class="headerlink" title="10.3 配置包"></a>10.3 配置包</h3><pre><code> plugins: [    new HtmlWebpackPlugin({      title: &#39;使用HtmlWebpackPlugin&#39;    })  ]</code></pre><h2 id="chapter-11-清理dist目录"><a href="#chapter-11-清理dist目录" class="headerlink" title="chapter 11: 清理dist目录"></a>chapter 11: 清理dist目录</h2><h3 id="11-1-下载包"><a href="#11-1-下载包" class="headerlink" title="11.1 下载包"></a>11.1 下载包</h3><pre><code>npm install -D clean-webpack-plugin</code></pre><h3 id="11-2-引入包"><a href="#11-2-引入包" class="headerlink" title="11.2 引入包"></a>11.2 引入包</h3><pre><code>const CleanWebpackPlugin = require(&#39;clean-webpack-plugin&#39;);</code></pre><h3 id="11-3-配置包"><a href="#11-3-配置包" class="headerlink" title="11.3 配置包"></a>11.3 配置包</h3><pre><code>   new CleanWebpackPlugin([&#39;dist&#39;])</code></pre><h2 id="chapter-12-自动编译实时加载"><a href="#chapter-12-自动编译实时加载" class="headerlink" title="chapter 12: 自动编译实时加载"></a>chapter 12: 自动编译实时加载</h2><h3 id="12-1-下载包"><a href="#12-1-下载包" class="headerlink" title="12.1 下载包"></a>12.1 下载包</h3><pre class=" language-shell"><code class="language-shell">npm install -D webpack-dev-server</code></pre><h3 id="12-2-配置包"><a href="#12-2-配置包" class="headerlink" title="12.2 配置包"></a>12.2 配置包</h3><pre class=" language-js"><code class="language-js">devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    contentBase<span class="token punctuation">:</span> <span class="token string">'./dist'</span><span class="token punctuation">}</span></code></pre><h3 id="12-3-配置启动项"><a href="#12-3-配置启动项" class="headerlink" title="12.3 配置启动项"></a>12.3 配置启动项</h3><pre class=" language-shell"><code class="language-shell">"start": "webpack-dev-server --config webpack.config.js"</code></pre><h2 id="chapter-13-热替换"><a href="#chapter-13-热替换" class="headerlink" title="chapter 13: 热替换"></a>chapter 13: 热替换</h2><h3 id="13-1-配置"><a href="#13-1-配置" class="headerlink" title="13.1 配置"></a>13.1 配置</h3><pre class=" language-javascript"><code class="language-javascript">  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'使用HtmlWebpackPlugin'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'dist'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NamedModulesPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>   devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>     contentBase<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     hot<span class="token punctuation">:</span> <span class="token boolean">true</span>   <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack入门到放弃 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
